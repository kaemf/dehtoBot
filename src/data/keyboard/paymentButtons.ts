import { Markup } from "telegraf";
type HideableIKBtn = ReturnType<typeof Markup.button.callback>;

//Generate button for payment status (change when paymentStatus changed)
export const inlineApprovePayment = (id: number, paymentStatus: string): HideableIKBtn[][] => {
    if (paymentStatus === 'unknown') {
        return [
            [
                Markup.button.callback("üëå", `approvePayment:${id}`),
                Markup.button.callback("‚ùå", `rejectPayment:${id}`),
            ]
        ];
        } 
    else if (paymentStatus === 'paid') {
        return [
            [
                Markup.button.callback("üü¢ –û–ø–ª–∞—á–µ–Ω–æ", `paidCheck:${id}`),
                Markup.button.callback("‚ùå", `resetPaymentStatus:${id}`),
            ]
        ];
    } 
    else if (paymentStatus === 'nopaid') {
        return [
            [
                Markup.button.callback("üî¥ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", `nopaidCheck:${id}`),
                Markup.button.callback("‚ùå", `resetPaymentStatus:${id}`),
            ]
        ];
    }
    return [];
};

//Generate button for payment status in Club Once Lesson
export const inlineAcceptOncePayment = (id: number, ObjectIDClub: string, paymentStatus: string, date: string): HideableIKBtn[][] => {
    if (paymentStatus === 'unknown') {
        return [
            [
                Markup.button.callback("üëå", `acceptPayment:${id},${ObjectIDClub},${date}`),
                Markup.button.callback("‚ùå", `declinePayment:${id},${ObjectIDClub},${date}`),
            ]
        ];
        } 
    else if (paymentStatus === 'paid') {
        return [
            [
                Markup.button.callback("üü¢ –û–ø–ª–∞—á–µ–Ω–æ", `paidCheckT:${id}`)
            ]
        ];
    } 
    else if (paymentStatus === 'nopaid') {
        return [
            [
                Markup.button.callback("üî¥ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", `nopaidCheckT:${id}`)
            ]
        ];
    }
    return [];
}

// Generate button for payment status in Club Once Lesson without Club
export const inlineAcceptOncePaymentWithoutClub = (id: number, paymentStatus: string, date: string): HideableIKBtn[][] => {
    if (paymentStatus === 'unknown') {
        return [
            [
                Markup.button.callback("üëå", `acceptPaymentWO:${id},${date}`),
                Markup.button.callback("‚ùå", `declinePaymentWO:${id},${date}`),
            ]
        ];
        } 
    else if (paymentStatus === 'paid') {
        return [
            [
                Markup.button.callback("üü¢ –û–ø–ª–∞—á–µ–Ω–æ", `paidCheckT:${id}`)
            ]
        ];
    } 
    else if (paymentStatus === 'nopaid') {
        return [
            [
                Markup.button.callback("üî¥ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", `nopaidCheckT:${id}`)
            ]
        ];
    }
    return [];
}

//Generate button for payment status in Club Packet
export const inlineAcceptPacketPayment = (id: number, paymentStatus: string, packet: string): HideableIKBtn[][] => {
    if (paymentStatus === 'unknown') {
        return [
            [
                Markup.button.callback("üëå", `acceptPaymentP:${id},${packet}`),
                Markup.button.callback("‚ùå", `declinePaymentP:${id},${packet}`),
            ]
        ];
        } 
    else if (paymentStatus === 'paid') {
        return [
            [
                Markup.button.callback("üü¢ –û–ø–ª–∞—á–µ–Ω–æ", `paidCheckT:${id}`)
            ]
        ];
    } 
    else if (paymentStatus === 'nopaid') {
        return [
            [
                Markup.button.callback("üî¥ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", `nopaidCheckT:${id}`)
            ]
        ];
    }
    return [];
}

//Generate button for payment status in Club Packet
export const inlineAcceptClubWithPacketPayment = (id: number, ObjectIDClub: string, paymentStatus: string, packet: string, date: string): HideableIKBtn[][] => {
    if (paymentStatus === 'unknown') {
        return [
            [
                Markup.button.callback("üëå", `acceptPaymentCP:${id},${ObjectIDClub},${packet},${date}`),
                Markup.button.callback("‚ùå", `declinePaymentCP:${id},${ObjectIDClub},${packet},${date}`),
            ]
        ];
        } 
    else if (paymentStatus === 'paid') {
        return [
            [
                Markup.button.callback("üü¢ –û–ø–ª–∞—á–µ–Ω–æ", `paidCheckCP:${id}`)
            ]
        ];
    } 
    else if (paymentStatus === 'nopaid') {
        return [
            [
                Markup.button.callback("üî¥ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", `nopaidCheckCP:${id}`)
            ]
        ];
    }
    return [];
}

//Generate Event buttons for announcement clubs
export const inlineEventAnnouncementClub = (id: number, ObjectIDClub: string): HideableIKBtn[][] => {
    return [
        [
            Markup.button.callback("üòç –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è!", `acceptEventAnnouncementClub:${id},${ObjectIDClub}`),
            Markup.button.callback("üòí –Ω—î, –Ω–µ —Ü—ñ–∫–∞–≤–æ", `declineEventAnnouncementClub:${id},${ObjectIDClub}`),
        ]
    ];
}

//If individual no lessons, payment button generate
export const inlinePayButton = (id: number): HideableIKBtn[][] => {
    return [
        [
            Markup.button.callback("–ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", `goToPay:${id}`),
        ]
    ];
}

export const inlineScheduleTrialLessonTeacher = (id: number, idStudent: number): HideableIKBtn[][] => {
    return [
        [
            Markup.button.callback("–∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –ø—Ä–æ–±–Ω–µ –∑–∞–Ω—è—Ç—Ç—è", `scheduleTrialLessonTeacher:${id},${idStudent}`),
        ]
    ];
}

// Go to detask Solution
export const inlineGoToDetaskSolution = (id: number): HideableIKBtn[][] => {
    return [
        [
            Markup.button.callback("–≤–∏–∫–æ–Ω–∞—Ç–∏", `goToDetaskSolution:${id}`),
        ]
    ];
}

// Go to detask Check
export const inlineGoToDetaskCheck = (id: number): HideableIKBtn[][] => {
    return [
        [
            Markup.button.callback("–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", `goToDetaskCheck:${id}`),
        ]
    ];
}

export const ClubInlineKeyboardGenerate = (typeClub: string, id: number, clubIndex: string, paymentStatus: string, packet: string | undefined, date: string): HideableIKBtn[][] => {
    switch (typeClub){
        case "–†–∞–∑–æ–≤–µ –∑–∞–Ω—è—Ç—Ç—è":
            return clubIndex !== ''
            ?
            inlineAcceptOncePayment(id, clubIndex, paymentStatus, date)
            :
            inlineAcceptOncePaymentWithoutClub(id, paymentStatus, date)

        case "–®–ø—Ä–∞—Ö –∫–ª—É–±":
            return clubIndex !== ''
            ?
            inlineAcceptClubWithPacketPayment(id, clubIndex, paymentStatus, packet!, date)
            :
            inlineAcceptPacketPayment(id, paymentStatus, packet!)

        default:
            throw new Error(`Uncorrect parametr typeClub in ClubInlineKeyboardGenerate() ` + typeClub);
    }
}