// DehtoBot for dehto German Course
// Developed by Yaroslav Volkivskyi (TheLaidSon)

// Actual v2.0 Rebirth

// Main File
import script from "./data/general/script";
import packet from "./data/course/packets";
import * as schedule from 'node-schedule';
import { confirmationChat, supportChat, devChat, versionBot, eugeneChat } from './data/general/chats';
import { CheckException } from "./base/handlers/check";
import arch from './base/main/architecture';
import getCourses, { Course, Courses, courseNumbersToSkip } from "./data/course/coursesAndTopics";
import Key from "./base/handlersdb/changeKeyValue";
import Role, { ConvertRole } from "./base/handlersdb/changeRoleValue";
import keyboards, { checkChats } from "./data/keyboard/keyboards";
import { ConvertToPrice, ConvertToPacket } from "./data/process/convertPaymentPerLesson";
import { inlineApprovePayment, inlineAcceptOncePayment, inlineAcceptOncePaymentWithoutClub, 
  inlineAcceptPacketPayment, inlineAcceptClubWithPacketPayment, inlineEventAnnouncementClub } 
  from "./data/keyboard/paymentButtons";
import formattedName from "./data/process/nameFormatt";
import DateRecord from "./base/handlers/getTime";
import MongoDBReturnType from "./data/general/mongoDBType";
import { Markup, TelegramError } from "telegraf";
import { ObjectId } from 'mongodb';

async function main() {
  const [ onTextMessage, onContactMessage, onPhotoMessage, onDocumentationMessage, bot, db, dbProcess ] = await arch();

  //Begin bot work, collecting user data (his telegram name) set up state_1
  bot.start( (ctx) => {
    console.log('STARTED');

    try {
      ctx.reply(script.entire.greeting, {reply_markup: { remove_keyboard: true }});
    } catch (error) {
      if (error instanceof TelegramError && error.code === 403) {
        console.warn('\nThe user blocked the active bot, the message was not sent to one of the recipients');
      } else {
        console.error('Error sending message for user: ', error);
      }
    }
    const username = ctx.chat.type === "private" ? ctx.chat.username ?? null : null;
    db.set(ctx.chat.id)('username')(username ?? 'unknown')
    db.set(ctx.chat.id)('state')('WaitingForName')
  });
  
  bot.command('menu', async (ctx) => {
    console.log('menu tapped');
    const set = db.set(ctx?.chat?.id ?? -1),
      userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    ctx.reply(script.entire.chooseFunction, {
      parse_mode: "Markdown",
      reply_markup: {
        one_time_keyboard: true,
        keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role ?? 'guest')
      }
    })

    await set('state')('FunctionRoot');
  });

  schedule.scheduleJob('0 */2 * * *', async () => {
    await dbProcess.DeleteExpiredClubs();
  });

  //Get real user name and root to get phone number with this.function
  onTextMessage('WaitingForName', async (ctx, user, set, data) => {
    if (CheckException.TextException(data)){
      const name = formattedName(data.text);
      
      console.log(`Name: ${name}`)
      await set('state')('AskingForPhoneNumber');
  
      await set('name')(name);
  
      ctx.reply(script.entire.niceNameAndGetPhone(name), {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: script.entire.shareYourPhone,
                request_contact: true,
              },
            ],
          ],
        },
      });
      await set('state')('AskingForPhoneNumber')
    }
    else{
      ctx.reply(script.errorException.nameGettingError);
    }
  })

  //Get user phone number with using funciion of getting
  onContactMessage('AskingForPhoneNumber', async (ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.greeting, {reply_markup: { remove_keyboard: true }});
      await set('state')('WaitingForName');
    }
    else if (!CheckException.PhoneException(data)){
      ctx.reply(script.errorException.phoneGettingError.defaultException, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: script.entire.shareYourPhone,
                request_contact: true,
              },
            ],
          ],
        },
      });
    }
    else{
      set('phone_number')(data.phone_number[0]);

      const userObject = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

      if (userObject){
        await dbProcess.UpdateUserData(userObject._id, data.phone_number[0], user['username']);
      }
      else dbProcess.AddUser({ id: ctx?.chat?.id ?? -1, name: user['name'], number: data.phone_number[0], username: user['username'], role: 'guest', count: 0 });

      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userObject && userObject!.role !== undefined && userObject!.role !== null ? userObject!.role : 'guest')
        }
      })

      await set('state')('FunctionRoot');
    }
  });

  onTextMessage('FunctionRoot', async (ctx, user, set, data) => {
    const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    await set('sc_request_torecord_usertoclub')('');

    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.niceNameAndGetPhone(user['name']), {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: script.entire.shareYourPhone,
                request_contact: true,
              },
            ],
          ],
        },
      });
      await set('state')('AskingForPhoneNumber');
    }
    else if (data.text === '–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è' || data.text === '–ú–æ—ó —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è'){
      ctx.reply(script.indivdual.entire(userI!.role), {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.indiviualMenu(userI!.role)
        }
      })

      await set('state')('IndividualHandler');
    }
    else if (data.text === '–¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è' && userI!.role === 'teacher'){
      if (userI!.set_detasks){
        ctx.reply('–≤—ñ—Ç–∞—é –≤ –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è—Ö, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.deTaskMenu()
          }
        })
        await set('state')('TeacherDeTaskHandler');
      }
      else{
        ctx.reply('–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å—é–¥–∏ —É—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, —è–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—é —Ç–∞ –ø—ñ—Å–ª—è –≤–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è')
        await set('state')('TeachersSetTasksHandler')
      }
    }
    else if (data.text === "–í—á–∏—Ç–µ–ª—å –Ω–∞ –≥–æ–¥–∏–Ω—É"){
      ctx.reply(script.teacherOnHour.whatsTheProblem, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.coursesTeacherOnHour()
        },
      });
      await set('state')('ChoosingCourses');
    }
    else if (data.text === "–†–æ–∑–º–æ–≤–Ω—ñ –∫–ª—É–±–∏"){
      ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: await keyboards.speakingClubMenu()
        },
      });

      await set('state')('ActionClubRespondAndRootAction');
    }
    else if (data.text === 'sysinfo'){
      ctx.reply(script.about(versionBot), {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: '–í –ú–ï–ù–Æ'}]]
        }
      })
    }
    else if (data.text === "–ê–¥–º—ñ–Ω –ü–∞–Ω–µ–ª—å" && checkChats(ctx?.chat?.id ?? -1)){
      ctx.reply("–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, –ú–µ—Ä–∫–µ–ª—å! :)", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–®–ø—Ä–∞—Ö-–ö–ª—É–±–∏"
              },
              {
                text: "–û—Å–æ–±–æ–≤—ñ —Å–ø—Ä–∞–≤–∏"
              }
            ],[
              {
                text: "–í –ú–ï–ù–Æ"
              }
            ]
          ],
        },
      })

      await set('state')('AdminRootHandler');
    }
    else if (data.text === '–ú–æ—ó –®–ø—Ä–∞—Ö-–∫–ª—É–±–∏'){
      const results = await dbProcess.ShowAll(),
        users = await dbProcess.ShowAllUsers();

      // For Teachers
      for (let i = 0; i < results.length; i++){
        if (parseInt(results[i].teacher_id) === ctx?.chat?.id ?? -1){
          let userHaved : string = '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n';
          for (let j = 0; j < users.length; j++) {
            if (await dbProcess.HasThisClubUser(users[j].id, results[i]._id)){
              userHaved += `- ${users[j].name} (@${users[j].username})\nüì≤${users[j].number}\n\n`;
            }
          }
            if (userHaved === '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n'){
              userHaved = '';
            }

            let addString = results[i].count > 0 ? `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}` : `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;
  
          await ctx.telegram.sendDocument(ctx?.chat?.id ?? -1, results[i].documentation, { caption: script.speakingClub.report.showClubTypeTeacher(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString, userHaved, results[i].link), 
            parse_mode: "HTML"
          });
        }
      }
    }
    else{
      ctx.reply(script.errorException.chooseFunctionError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
        },
      });
    }
  })

  onTextMessage('IndividualHandler', async(ctx, user, set, data) => {
    const userObject = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userObject!.role)
        }
      })

      await set('state')('FunctionRoot');
    }
    else if (data.text === "–ü—Ä–æ–±–Ω–µ –∑–∞–Ω—è—Ç—Ç—è" && userObject!.role === 'guest'){
      ctx.reply(script.trialLesson.niceWhatATime, {reply_markup: {remove_keyboard: true}});
      await set('state')('GraphicRespondAndCountRequest');
    }
    else if (data.text === "–û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç—å"){
      ctx.reply(script.payInvidualLesson.chooseLevelCourse, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.chooseLevelCourses()
        },
      });
      await set('state')('RespondCourseAndGetPacket');
    }
    else if (data.text === '–ë–∞–ª–∞–Ω—Å –º–æ—ó—Ö –∑–∞–Ω—è—Ç—å' && userObject!.role === 'student'){
      const count = 1;
      if (count > 0){
        ctx.reply(`‚úÖ –ë–∞–ª–∞–Ω—Å –≤–∞—à–∏—Ö —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –∑–∞–Ω—è—Ç—å ${count} –∑–∞–Ω—è—Ç—å (${count * 60} —Ö–≤)`, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.indiviualMenu(userObject!.role)
          }
        })
      }
      else{
        ctx.reply(`üò¢ ${user['name']} —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–Ω—è—Ç—å, ${userObject!.role === 'guest' ? '–ø–æ—á–Ω—ñ–º–æ?' : '–±—É–¥–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏?'}`, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.yesNo(true)
          }
        })

        await set('state')('NotEnoughIndividualLessonsHandler');
      }
    }
    else if (data.text === '–ú–æ—ó –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è' && userObject!.role === 'student'){
      const userData = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1),
        actualTask = userData ? userData.detask : false;

      if (actualTask){
        const task = await dbProcess.GetDeTaskForStudent(actualTask);
        await ctx.reply(`üòè —Ö–∞—Ö, ${user['name']}, –≤–∞—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è:`);
        
        if (task){
          if (task.content){
            const content = task.content;
            for (let i = 0; i < content.length; i++){
              await ctx.reply(content[i]);
            }
          }
          if (task.files && task.typeOfFiles){
            const files = task.files,
              idAddress = ctx?.chat?.id ?? -1;
            for (let i = 0; i < files.length; i++){
              switch (task.typeOfFiles[i]) {
                case "file":
                  const file = files[i].split(';');
                  await ctx.telegram.sendDocument(idAddress, file[0], {caption: file[1] ? file[1] : ''});
                  break;

                case "photo":
                  const photo = files[i].split(';');
                  await ctx.telegram.sendPhoto(idAddress, photo[0], {caption: photo[1] ? photo[1] : ''});
                  break;

                case "audio":
                  await ctx.telegram.sendAudio(idAddress, files[i]);
                  break;

                case "location":
                  const loc = files[i].split(';');
                  await ctx.telegram.sendLocation(idAddress, loc[0], loc[1]);
                  break;

                case "video_circle":
                  await ctx.telegram.sendVideoNote(idAddress, files[i]);
                  break;

                case "voice":
                  await ctx.telegram.sendVoice(idAddress, files[i]);
                  break;

                case "contact":
                  const phone = files[i].split(';');
                  await ctx.telegram.sendContact(idAddress, phone[0], phone[1]);
                  break;

                default:
                  ctx.reply('–Ω–∞–º –ø—Ä–∏–∫—Ä–æ, –∞–ª–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –≤–∏–∫–ª–∞–¥–∞—á–µ–º —Ç–∏–ø —Ñ–∞–π–ª—É –Ω–∞—Ä–∞–∑—ñ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –≤–∏–±–∞—á—Ç–µ –∑–∞ —Ç—Ä—É–¥–Ω–æ—â—ñ...');

              }
            }
          }
          await ctx.reply('*–º–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —É—Å—ñ –≤–∏–¥–∏ —Ñ–∞–π–ª—ñ–≤ (—Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –∫—Ä—É–∂–µ—á–∫–∏, –≤–æ–π—Å–∏ —ñ —Ç–¥)');
          await set('state')('RespondStudentDeTaskHandler');
        }
      }
      else ctx.reply('–≤–∏–±–∞—á—Ç–µ, –∞–ª–µ —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–µ–ó–∞–≤–¥–∞–Ω—å :(');
    }
    else if (data.text === '–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥'){
      if (userObject!.role === 'student'){

      }
      else if (userObject!.role === 'teacher'){

      }
      else{
        ctx.reply(script.errorException.chooseButtonError, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.indiviualMenu(userObject!.role)
          }
        })
      }
    }
    else if (data.text === '–ó–Ω–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞' && (userObject!.role === 'admin' || userObject!.role === 'developer')){
      ctx.reply('–≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ ID / –ø–æ–≤–Ω–µ —ñ–º‚Äô—è / –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É / –Ω—ñ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ');
      await set('state')('StudentFindHandler')
    }
    else if (data.text === '–ù–∞—à—ñ –≤–∏–∫–ª–∞–¥–∞—á—ñ' && (userObject!.role === 'admin' || userObject!.role === 'developer')){
      const teachers = await dbProcess.ShowAllUsers();
      let teachersKeyboard = [];

      for (let i = 0; i < teachers.length; i++){
        if (teachers[i].role === 'teachers'){
          teachersKeyboard.push([{ text: teachers[i].name }]);
        }
      }
      ctx.reply('–æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ —è–∫–∏–º –≤–∏ —Ö–æ—á–µ—Ç–µ —â–æ—Å—å –∑—Ä–æ–±–∏—Ç–∏:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: teachersKeyboard
        }
      });
      await set('state')('AdminTeachersOperationHandler')
    }
    else if (data.text === "–ó–∞–ø–∏—Å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è"){
      ctx.reply(script.registrationLesson.niceWhatATime, {reply_markup: {remove_keyboard: true}});
      await set('state')('_GraphicRespondAndLevelRequest');
    }
    else if (data.text === '–í –ú–ï–ù–Æ'){
      console.log('FunctionRoot');
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userObject!.role)
        }
      })
      await set('state')('FunctionRoot');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.indiviualMenu(userObject!.role)
        }
      })
    }
  })

  onTextMessage('GraphicRespondAndCountRequest', async(ctx, user, set, data) => {
    const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    if (CheckException.BackRoot(data)) {
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
        }
      })
      await set('state')('FunctionRoot'); 
    }
    else if (CheckException.TextException(data)){
      await set('graphic')(data.text);
      ctx.reply(script.trialLesson.countOfLessonsRequest, {reply_markup: {remove_keyboard: true}})
      await set('state')('CountRespondAndLevelRequest');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('CountRespondAndLevelRequest', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)) {
      ctx.reply(script.trialLesson.niceWhatATime, {reply_markup: {remove_keyboard: true}});
      await set('state')('GraphicRespondAndCountRequest');
    }
    else if (CheckException.TextException(data)){
      await set('countOfLessons')(data.text);
      ctx.reply(script.trialLesson.levelLanguageRequest, {reply_markup: {remove_keyboard: true}});
      await set('state')('LevelRespondAndRequestQuestions');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('LevelRespondAndRequestQuestions', async (ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.trialLesson.niceWhatATime, {reply_markup: {remove_keyboard: true}});
      await set('state')('GraphicRespondAndLevelRequest')
    }
    else if (CheckException.TextException(data)){
      await set('languagelevel')(data.text);
  
      ctx.reply(script.trialLesson.goalLearnRequest);
      await set('state')('RespondGoalAndSendData');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('RespondGoalAndSendData', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.trialLesson.levelLanguageRequest, {reply_markup: {remove_keyboard: true}});
      await set('state')('LevelRespondAndRequestQuestions');
    }
    else if (CheckException.TextException(data)){
      // For Developer
      ctx.telegram.sendMessage(devChat,
        script.trialLesson.report(user['name'], user['username'], user['phone_number'], user['graphic'], user['languagelevel'], data.text, DateRecord()),
        {parse_mode: 'HTML'})

      ctx.telegram.sendMessage(confirmationChat,
        script.trialLesson.report(user['name'], user['username'], user['phone_number'], user['graphic'], user['languagelevel'], data.text, DateRecord()),
        {parse_mode: 'HTML'})

      ctx.telegram.sendMessage(supportChat,
        script.trialLesson.report(user['name'], user['username'], user['phone_number'], user['graphic'], user['languagelevel'], data.text, DateRecord()),
        {parse_mode: 'HTML'})

      ctx.telegram.sendMessage(eugeneChat,
        script.trialLesson.report(user['name'], user['username'], user['phone_number'], user['graphic'], user['languagelevel'], data.text, DateRecord()),
        {parse_mode: 'HTML'})

      ctx.reply(script.trialLesson.thanksPartTwo(user['graphic']), {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–í –ú–ï–ù–Æ"
              },
              // {
              //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
              // }
            ]
          ]
        }
      })

      await set('state')('EndRootManager');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "—Ç–∞–∫, —î",
              },
            ],[
              {
                text: "–Ω—ñ, –Ω–µ–º–∞—î",
              },
            ],
          ],
        }
      })
    }
  })

  onTextMessage('NotEnoughIndividualLessonsHandler', async(ctx, user, set, data) => {
    const userObject = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userObject!.role)
        }
      })

      await set('state')('FunctionRoot');
    }
    else{
      switch(data.text){
        case "–¢–∞–∫":
          ctx.reply(script.payInvidualLesson.chooseLevelCourse, {
            parse_mode: "Markdown",
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.chooseLevelCourses()
            },
          });
          await set('state')('RespondCourseAndGetPacket');
          break;

        case "–ù—ñ":
          ctx.reply('—Ç–æ–¥—ñ –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!üå±', {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.indiviualMenu(userObject!.role)
            }
          })
          await set('state')('IndividualHandler');
          break;

        default:
          ctx.reply(script.errorException.chooseButtonError, {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.yesNo(true)
            }
          })
          break;
      }
    }
  })

  onTextMessage('EndRootManager', async(ctx, user, set, data) => {
    console.log('User go to end manager');

    if (data.text === '–ó–∞–º–æ–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É –∑—É—Å—Ç—Ä—ñ—á'){
      console.log('User Choose more meet')
      ctx.reply(script.teacherOnHour.whatsTheProblem, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.coursesTeacherOnHour()
        },
      });
      await set('state')('ChoosingCourses');
    } 
    else if (data.text === '–í –ú–ï–ù–Æ'){
      console.log('FunctionRoot');
      const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
        }
      })
      await set('state')('FunctionRoot');
    }
    else if (data.text === '–ù–∞–∑–∞–¥ –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó'){
      const results = await dbProcess.ShowAll();
      let addString : string = '';
    
      for (let i = 0; i < results.length; i++) {
          if (results[i].count > 0) {
            addString = `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}`;
          } else {
            addString = `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;
          }

        await ctx.reply(script.speakingClub.report.showClub(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString), {
          parse_mode: "HTML"
        });
      }

      await ctx.reply('–≤–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–ø—Ä–∞—Ö–∞ –¥–ª—è –∑–∞–ø–∏—Å—É:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('GetClubToRegistrationAndCheckPayment');
    }
    else if (data.text === 'sysinfo'){
      ctx.reply(script.about(versionBot), {
        parse_mode: 'HTML',
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '–í –ú–ï–ù–Æ'
              }
            ]
          ]
        }
      })
    }
    else{
      ctx.reply(script.errorException.chooseMenuButtonError, {
        parse_mode: 'HTML',
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '–í –ú–ï–ù–Æ'
              }
            ]
          ]
        }
      })
    }
  })

  onTextMessage('RespondCourseAndGetPacket', async(ctx, user, set, data) => {
    const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);
    
    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
        }
      })
      await set('state')('FunctionRoot');
    }
    else if (data.text === '–†—ñ–≤–µ–Ω—å –°1-–°2' || data.text === '–†—ñ–≤–µ–Ω—å –í1-–í2' || data.text === '–†—ñ–≤–µ–Ω—å –ê1-–ê2'){
      const showLevel = packet[data.text as keyof typeof packet];
  
      await set('courseLevel')(data.text);
  
      ctx.reply(script.payInvidualLesson.choosePacket(showLevel['üîµ']['price'], showLevel['üî¥']['price'], showLevel['üü¢']['price'], showLevel['üü°']['price']), {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "üîµ",
              },
              {
                text: "üî¥",
              },
            ],
            [
              {
                text: "üü¢",
              },
              {
                text: "üü°",
              }
            ],
          ],
        },
      });
  
      await set('state')('RespondPacketAndGetPayment');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.chooseLevelCourses()
        },
      })
    }
  })

  onTextMessage('RespondPacketAndGetPayment', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.payInvidualLesson.chooseLevelCourse, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.chooseLevelCourses()
        },
      });

      await set('state')('RespondCourseAndGetPacket');
    }
    else if (data.text === 'üü°' || data.text === 'üü¢' || data.text === 'üî¥' || data.text === 'üîµ'){
      const answer = data.text,
      showPacket = packet[user['courseLevel'] as keyof typeof packet][answer];

      await set('choosedPacketColor')(answer);
  
      await set('choosedPacket')(`${user['courseLevel']}, ${showPacket.name} (${showPacket.countOfLessons} –∑–∞–Ω—è—Ç—å) - ${showPacket.price}`);
  
      await ctx.reply(script.payInvidualLesson.statsAboutChoosedPacket(showPacket.name, showPacket.price, showPacket.countOfLessons))
      await ctx.reply(script.payInvidualLesson.payment.require);
      await ctx.reply(script.payInvidualLesson.payment.proofRequest, {reply_markup: {remove_keyboard: true}
      });
      await set('state')('RespondPaymentAndSendData');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "üîµ",
              },
              {
                text: "üî¥",
              },
            ],
            [
              {
                text: "üü¢",
              },
              {
                text: "üü°",
              }
            ],
          ],
        },
      })
    }
  })

  onPhotoMessage('RespondPaymentAndSendData', async(ctx, user, set, data) => {
    const id = ctx?.chat?.id ?? -1,
      get = db.get(ctx?.chat?.id ?? -1);
    await set('paymentStatus')('unknown');

    // –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç—å

    if (CheckException.BackRoot(data)){
      const showLevel = packet[data.text as keyof typeof packet];

      ctx.reply(script.payInvidualLesson.choosePacket(showLevel['üîµ']['price'], showLevel['üî¥']['price'], showLevel['üü¢']['price'], showLevel['üü°']['price']), {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "üîµ",
              },
              {
                text: "üî¥",
              },
            ],
            [
              {
                text: "üü¢",
              },
              {
                text: "üü°",
              }
            ],
          ],
        },
      });
  
      await set('state')('RespondPacketAndGetPayment');
    }
    else if (CheckException.PhotoException(data)){
      const paymentStatus: string = await get('paymentStatus') ?? 'unknown',
        name = get("name") ?? "—É—á–µ–Ω—å",
        inline = inlineApprovePayment(id, paymentStatus),
        unique_file_id = data.photo[0];
  
      // For Developer
      // ctx.telegram.sendPhoto(devChat, unique_file_id, {
      //   caption: script.payInvidualLesson.report(user['name'], user['username'], user['phone_number'], user['choosedPacket'], DateRecord()), 
      //   parse_mode: 'HTML',
      //   ...Markup.inlineKeyboard(inline)
      //   }
      // )
      
      ctx.telegram.sendPhoto(confirmationChat, unique_file_id, {
        caption: script.payInvidualLesson.report(user['name'], user['username'], user['phone_number'], user['choosedPacket'], DateRecord()), 
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(inline)
        }
      )
  
      ctx.telegram.sendPhoto(supportChat, unique_file_id, {
        caption: script.payInvidualLesson.report(user['name'], user['username'], user['phone_number'], user['choosedPacket'], DateRecord()),
        parse_mode: 'HTML', 
        ...Markup.inlineKeyboard(inline)
        }
      )

      ctx.telegram.sendPhoto(eugeneChat, unique_file_id, {
        caption: script.payInvidualLesson.report(user['name'], user['username'], user['phone_number'], user['choosedPacket'], DateRecord()),
        parse_mode: 'HTML', 
        ...Markup.inlineKeyboard(inline)
        }
      )
  
      ctx.reply(script.payInvidualLesson.endWork(await name ?? "—É—á–µ–Ω—å"), {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '–í –ú–ï–ù–Æ',
              },
              // {
              //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
              // }
            ],
          ],
        },
      });

      set('state')('EndRootManager')
    }
    else if (CheckException.FileException(data)){
      const paymentStatus: string = await get('paymentStatus') ?? 'unknown',
        name = get("name") ?? "—É—á–µ–Ω—å",
        inline = inlineApprovePayment(id, paymentStatus),
        unique_file_id = data.file[0];
  
      // For Developer
      // ctx.telegram.sendDocument(devChat, unique_file_id, {
      //   caption: script.payInvidualLesson.report(user['name'], user['username'], user['phone_number'], user['choosedPacket'], DateRecord()), 
      //   parse_mode: 'HTML',
      //   ...Markup.inlineKeyboard(inline)
      //   }
      // )
      
      ctx.telegram.sendDocument(confirmationChat, unique_file_id, {
        caption: script.payInvidualLesson.report(user['name'], user['username'], user['phone_number'], user['choosedPacket'], DateRecord()), 
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(inline)
        }
      )
  
      ctx.telegram.sendDocument(supportChat, unique_file_id, {
        caption: script.payInvidualLesson.report(user['name'], user['username'], user['phone_number'], user['choosedPacket'], DateRecord()),
        parse_mode: 'HTML', 
        ...Markup.inlineKeyboard(inline)
        }
      )

      ctx.telegram.sendDocument(eugeneChat, unique_file_id, {
        caption: script.payInvidualLesson.report(user['name'], user['username'], user['phone_number'], user['choosedPacket'], DateRecord()),
        parse_mode: 'HTML', 
        ...Markup.inlineKeyboard(inline)
        }
      )
  
      ctx.reply(script.payInvidualLesson.endWork(await name ?? "—É—á–µ–Ω—å"), {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '–í –ú–ï–ù–Æ',
              },
              // {
              //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
              // }
            ],
          ],
        },
      });

      set('state')('EndRootManager')
    }
    else{
      ctx.reply(script.errorException.paymentGettingError);
    }
  })

  //
  onTextMessage('HaveAdditionalQuestion', async (ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.teacherOnHour.additionalQuestions.question, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: script.teacherOnHour.additionalQuestions.yes,
              },
              {
                text: script.teacherOnHour.additionalQuestions.no,
              }
            ],
          ],
        },
      });
  
      await set('state')('AnswerForAdditionalQuestions');
    }
    else if (CheckException.TextException(data)){
      set('question')(data.text);
      await ctx.reply(script.teacherOnHour.payment.thanks);
      await ctx.reply(script.teacherOnHour.payment.sendPics, {reply_markup: { remove_keyboard: true }});
      await set('state')('WaitingForPayment')
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('AnswerForAdditionalQuestions', async (ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      const courses = getCourses(user['course'] as Courses);
      set('course')(user['course']);
  
      console.log('Courses\n' + user['course']);
      console.log(courses);
  
      //skiping process
      const keyboard = courses.map((el: Course, idx) => {
        const displayedIndex : number = idx + 1;
        if (courseNumbersToSkip[user['course']].includes(displayedIndex)) return null;
        return [{ text: `${displayedIndex}. ${el}` }];
      }).filter(buttons => buttons !== null);
  
      ctx.reply(script.teacherOnHour.whatLecture, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboard.map(buttons => buttons || []),
        },
      });
      await set('state')("AdditionalQuestions");
    }
    else if (data.text === script.teacherOnHour.additionalQuestions.yes) {
      ctx.reply(script.teacherOnHour.additionalQuestions.ifYes, {reply_markup: {remove_keyboard: true}});
      await set('state')("HaveAdditionalQuestion");
    } 
    else if (data.text === script.teacherOnHour.additionalQuestions.no) {
      await ctx.reply(script.teacherOnHour.payment.thanks);
      await ctx.reply(script.teacherOnHour.payment.sendPics,  {reply_markup: {remove_keyboard: true}});
      await set('question')('–Ω–µ–º–∞—î');
      await set('state')("WaitingForPayment");
    }
    else {
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: script.teacherOnHour.additionalQuestions.yes,
              },
              {
                text: script.teacherOnHour.additionalQuestions.no,
              }
            ],
          ],
        },
      });
    }
  })

  onTextMessage('AdditionalQuestions', async (ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.teacherOnHour.whatsTheProblem, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.coursesTeacherOnHour()
        },
      });

      await set('state')('ChoosingCourses');
    }
    else if (getCourses(user['course'] as Courses).some((item) => data.text.includes(item))){
      set('lecture')(data.text);
      ctx.reply(script.teacherOnHour.additionalQuestions.question, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: script.teacherOnHour.additionalQuestions.yes,
              },
              {
                text: script.teacherOnHour.additionalQuestions.no,
              }
            ],
          ],
        },
      });
  
      await set('state')('AnswerForAdditionalQuestions');
    }
    else{
      const courses = getCourses(user['course'] as Courses);
  
      //skiping process
      const keyboard = courses.map((el: Course, idx) => {
        const displayedIndex : number = idx + 1;
        if (courseNumbersToSkip[user['course']].includes(displayedIndex)) return null;
        return [{ text: `${displayedIndex}. ${el}` }];
      }).filter(buttons => buttons !== null);

      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboard.map(buttons => buttons || []),
        },
      })
    }
  })

  onTextMessage('ChoosingCourses', async (ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: await keyboards.speakingClubMenu()
        }
      })
      await set('state')('FunctionRoot');
    }
    else if (data.text === 'A1.1' || data.text === 'A1.2' || data.text === 'A2.1' || data.text === 'A2.2'){
      const courses = getCourses(data.text as Courses);
      set('course')(data.text);
  
      console.log('Courses\n' + data.text);
      console.log(courses);
  
      //skiping process
      const keyboard = courses.map((el: Course, idx) => {
        const displayedIndex : number = idx + 1;
        if (courseNumbersToSkip[data.text].includes(displayedIndex)) return null;
        return [{ text: `${displayedIndex}. ${el}` }];
      }).filter(buttons => buttons !== null);
  
      ctx.reply(script.teacherOnHour.whatLecture, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboard.map(buttons => buttons || []),
        },
      });
      await set('state')("AdditionalQuestions");
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.coursesTeacherOnHour()
        },
      })
    }
  })

  onPhotoMessage('WaitingForPayment', async (ctx, user, set, data) => {
    const id = ctx?.chat?.id ?? -1,
      get = db.get(id);

    // –í—á–∏—Ç–µ–ª—å –Ω–∞ –≥–æ–¥–∏–Ω—É

    if (CheckException.BackRoot(data)){
      ctx.reply(script.teacherOnHour.additionalQuestions.question, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: script.teacherOnHour.additionalQuestions.yes,
              },
              {
                text: script.teacherOnHour.additionalQuestions.no,
              }
            ],
          ],
        },
      });
      await set('state')('HaveAdditionalQuestion');
    }
    else if (CheckException.PhotoException(data)){
      await set('paymentStatus')('unknown');
      const paymentStatus: string = await get('paymentStatus') ?? 'unknown',
        name = get("name") ?? "—É—á–µ–Ω—å",
        inline = inlineApprovePayment(id, paymentStatus),
        unique_file_id = data.photo[0];
      
      // For Developer
      // ctx.telegram.sendPhoto(devChat, unique_file_id, {
      //   caption: script.teacherOnHour.report(user['name'], user['username'], user['phone_number'], user['course'], user['lecture'], user['question'], DateRecord()),
      //   parse_mode: 'HTML', 
      //   ...Markup.inlineKeyboard(inline)
      //   }
      // )
      
      ctx.telegram.sendPhoto(confirmationChat, unique_file_id, {
        caption: script.teacherOnHour.report(user['name'], user['username'], user['phone_number'], user['course'], user['lecture'], user['question'], DateRecord()),
        parse_mode: 'HTML', 
        ...Markup.inlineKeyboard(inline)
        }
      )
  
      ctx.telegram.sendPhoto(supportChat, unique_file_id, {
        caption: script.teacherOnHour.report(user['name'], user['username'], user['phone_number'], user['course'], user['lecture'], user['question'], DateRecord()),
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(inline)
        }
      )

      ctx.telegram.sendPhoto(eugeneChat, unique_file_id, {
        caption: script.teacherOnHour.report(user['name'], user['username'], user['phone_number'], user['course'], user['lecture'], user['question'], DateRecord()),
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(inline)
        }
      )
  
      ctx.reply(script.teacherOnHour.payment.paymentSent(await name ?? '—É—á–µ–Ω—å'));
      ctx.reply(script.teacherOnHour.payment.waitForContact, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '–ó–∞–º–æ–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É –∑—É—Å—Ç—Ä—ñ—á',
              },
            ],[
              {
                text: '–í –ú–ï–ù–Æ',
              },
              // {
              //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
              // }
            ],
          ],
        },
      });
  
      set('state')('EndRootManager');
    }
    else if (CheckException.FileException(data)){
      await set('paymentStatus')('unknown');
      const paymentStatus: string = await get('paymentStatus') ?? 'unknown',
        name = get("name") ?? "—É—á–µ–Ω—å",
        inline = inlineApprovePayment(id, paymentStatus),
        unique_file_id = data.file[0];
      
      // For Developer
      // ctx.telegram.sendDocument(devChat, unique_file_id, {
      //   caption: script.teacherOnHour.report(user['name'], user['username'], user['phone_number'], user['course'], user['lecture'], user['question'], DateRecord()),
      //   parse_mode: 'HTML', 
      //   ...Markup.inlineKeyboard(inline)
      //   }
      // )
      
      ctx.telegram.sendDocument(confirmationChat, unique_file_id, {
        caption: script.teacherOnHour.report(user['name'], user['username'], user['phone_number'], user['course'], user['lecture'], user['question'], DateRecord()),
        parse_mode: 'HTML', 
        ...Markup.inlineKeyboard(inline)
        }
      )
  
      ctx.telegram.sendDocument(supportChat, unique_file_id, {
        caption: script.teacherOnHour.report(user['name'], user['username'], user['phone_number'], user['course'], user['lecture'], user['question'], DateRecord()),
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(inline)
        }
      )

      ctx.telegram.sendDocument(eugeneChat, unique_file_id, {
        caption: script.teacherOnHour.report(user['name'], user['username'], user['phone_number'], user['course'], user['lecture'], user['question'], DateRecord()),
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(inline)
        }
      )
  
      ctx.reply(script.teacherOnHour.payment.paymentSent(await name ?? '—É—á–µ–Ω—å'));
      ctx.reply(script.teacherOnHour.payment.waitForContact, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '–ó–∞–º–æ–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É –∑—É—Å—Ç—Ä—ñ—á',
              },
            ],[
              {
                text: '–í –ú–ï–ù–Æ',
              },
              // {
              //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
              // }
            ],
          ],
        },
      });
  
      set('state')('EndRootManager');
    }
    else{
      ctx.reply(script.errorException.paymentGettingError, {reply_markup: {remove_keyboard: true}});
    }
  })

  onTextMessage('_GraphicRespondAndLevelRequest', async(ctx, user, set, data) => {
    const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.chooseFunction, {
      parse_mode: "Markdown",
      reply_markup: {
        one_time_keyboard: true,
        keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
      }
    })
    await set('state')('FunctionRoot');
    }
    else if (CheckException.TextException(data)){
      await set('_graphic')(data.text);
  
      ctx.reply(script.registrationLesson.levelLanguageRequest, {reply_markup: {remove_keyboard: true}});
      await set('state')('_LevelRespondAndRequestQuestions');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('_LevelRespondAndRequestQuestions', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.registrationLesson.niceWhatATime, {reply_markup: {remove_keyboard: true}});
      await set('state')('_GraphicRespondAndLevelRequest');
    }
    else if (CheckException.TextException(data)){
      await set('_languagelevel')(data.text);
  
      await ctx.reply(script.registrationLesson.thanks(user['name'], user['_graphic']));
      await set('state')('_GetQuestionsAndSendData');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('_GetQuestionsAndSendData', async(ctx, user, set, data) => {
    const id = ctx?.chat?.id ?? -1;

    if (CheckException.BackRoot(data)){
      ctx.reply(script.registrationLesson.levelLanguageRequest, {reply_markup: {remove_keyboard: true}});
      await set('state')('_LevelRespondAndRequestQuestions');
    }
    else if (CheckException.TextException(data)){
      await set('_addquesttrial')(data.text);
      
      // For Developer
      // ctx.telegram.sendMessage(devChat,
      //   script.registrationLesson.report(user['name'], user['username'], user['phone_number'], user['_graphic'], user['_languagelevel'], data.text, DateRecord()),
      //   { parse_mode: 'HTML' });
  
      ctx.telegram.sendMessage(confirmationChat,
        script.registrationLesson.report(user['name'], user['username'], user['phone_number'], user['_graphic'], user['_languagelevel'], data.text, DateRecord()),
        { parse_mode: 'HTML' });
  
      ctx.telegram.sendMessage(supportChat,
        script.registrationLesson.report(user['name'], user['username'], user['phone_number'], user['_graphic'], user['_languagelevel'], data.text, DateRecord()),
        { parse_mode: 'HTML' });

      ctx.telegram.sendMessage(eugeneChat,
        script.registrationLesson.report(user['name'], user['username'], user['phone_number'], user['_graphic'], user['_languagelevel'], data.text, DateRecord()),
        { parse_mode: 'HTML' });
  
      ctx.reply(script.registrationLesson.end, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–í –ú–ï–ù–Æ",
              },
              // {
              //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
              // }
            ],
          ],
        },
      })
  
      await set('state')('EndRootManager');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  // Club Handler
  onTextMessage('ActionClubRespondAndRootAction', async(ctx, user, set, data) => {
    const userA = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userA!.role),
        },
      });
    }
    else if (data.text === '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –∫–ª—É–±'){
      if (userA!.role !== 'teacher'){
        const results = await dbProcess.ShowAll();
      
        for (let i = 0; i < results.length; i++) {
          let addString = results[i].count > 0 ? `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}` : `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;
  
          await ctx.reply(script.speakingClub.report.showClub(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString), {
            parse_mode: "HTML"
          });
        }
  
        await ctx.reply('–≤–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–ª—É–±–∞ –¥–ª—è –∑–∞–ø–∏—Å—É:', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
              return [{ text: `${index + 1}` }];
            })
          }
        })
  
        await set('state')('GetClubToRegistrationAndCheckPayment');
      }
      else{
        ctx.reply('–≤–∏–∫–ª–∞–¥–∞—á—ñ –Ω–µ –º–æ–∂—É—Ç—å –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å.')
      }
    }
    else if (data.text === '–ó–∞–ª–∏—à–æ–∫ –º–æ—ó—Ö –∑–∞–Ω—è—Ç—å'){
      if (userA!.role !== 'teacher'){
        if (userA!.count > 0){
          ctx.reply(script.speakingClub.lessLessons(userA!.count), {
            parse_mode: "HTML",
            reply_markup: {
              one_time_keyboard: true,
              keyboard: [
                [
                  {
                    text: "–í –ú–ï–ù–Æ"
                  },
                ]
              ],
            },
          });
          await set('state')('EndRootManager');
        }
        else{
          ctx.reply(script.speakingClub.lessLessons(userA!.count), {
            parse_mode: "HTML",
            reply_markup: {
              one_time_keyboard: true,
              keyboard: [
                [
                  {
                    text: "—Ç–∞–∫"
                  },
                  {
                    text: "–Ω—ñ"
                  }
                ]
              ],
            },
          });
          await set('state')('RespondCheckLessonsAndGetLessons');
        }
      }
      else{
        ctx.reply('–≤–∏–∫–ª–∞–¥–∞—á –Ω–µ–º–∞—î –∑–∞–Ω—è—Ç—å');
      }
    }
    else if (data.text === '–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è'){
      const user = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);
      if (user!.role !== 'teacher'){
        ctx.reply(script.speakingClub.payPacketLesson, {
          parse_mode: "HTML",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.payPacketLessons()
          },
        });
        await set('temp-prev-state')('menu-state');
        await set('state')('RespondTypePacketAndGetPayment');
      }
      else{
        ctx.reply('–≤–∏–∫–ª–∞–¥–∞—á—ñ –Ω–µ –º–æ–∂—É—Ç—å –æ–ø–ª–∞—á—É–≤–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è.')
      }
    }
    else if (data.text === '–ú–æ—ó –®–ø—Ä–∞—Ö-–∫–ª—É–±–∏'){
      const userActiveClubs = await dbProcess.getUserActiveClubs(ctx?.chat?.id ?? -1);

      if (userActiveClubs){
        await ctx.reply(script.speakingClub.report.mySpeackingClub.ifTrue);
        for (let i = 0; i < userActiveClubs.length; i++){
          const actualClubData = await dbProcess.ShowData(new ObjectId(userActiveClubs[i]))

          await ctx.telegram.sendDocument(ctx?.chat?.id ?? -1,
            actualClubData!.documentation,
            {caption: script.speakingClub.report.showOwnClubToUser(i + 1, actualClubData!.title, actualClubData!.teacher,
              dbProcess.getDateClub(new Date(actualClubData!.date)), actualClubData!.time, actualClubData!.link)}
          );
        }

        ctx.reply('—Ü–µ –≤—Å—ñ –≤–∞—à—ñ –∫–ª–∞–±–∏ :)', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: "–í –ú–ï–ù–Æ"
                }
              ]
            ]
          }
        });

        await set('state')('EndRootManager');
      }
      else{
        await ctx.reply(script.speakingClub.report.mySpeackingClub.ifFalse, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: '—Ç–∞–∫'
                },
                {
                  text: '–Ω—ñ'
                }
              ]
            ]
          }
        })

        await set('state')('MyClubEmptyHandler');
      }
    }
    else if (data.text === '–ü—Ä–æ —à–ø—Ä–∞—Ö-–∫–ª—É–±'){
      ctx.reply(script.speakingClub.about, {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–í –ú–ï–ù–Æ"
              },
            ]
          ],
        },
      })

      await set('state')('EndRootManager');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: await keyboards.speakingClubMenu()
        },
      });
    }
  })

  // My Club Empty Handler
  onTextMessage('MyClubEmptyHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: await keyboards.speakingClubMenu()
        },
      });

      await set('state')('ActionClubRespondAndRootAction');
    }
    else if (data.text === '—Ç–∞–∫'){
      const results = await dbProcess.ShowAll();
      
      for (let i = 0; i < results.length; i++) {
        let addString : string = results[i].count > 0 ? `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}` : `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;

        await ctx.reply(script.speakingClub.report.showClub(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString), {
          parse_mode: "HTML"
        });
      }

      await ctx.reply('–≤–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–ø—Ä–∞—Ö–∞ –¥–ª—è –∑–∞–ø–∏—Å—É:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('GetClubToRegistrationAndCheckPayment');
    }
    else if (data.text === '–Ω—ñ'){
      ctx.reply(script.speakingClub.defaultDecline, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '–í –ú–ï–ù–Æ'
              }
            ]
          ]
        }
      })

      await set('state')('EndRootManager');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '—Ç–∞–∫'
              },
              {
                text: '–Ω—ñ'
              }
            ]
          ]
        }
      });
    }
  })

  // Check count of lessons and pay more if it need
  onTextMessage('RespondCheckLessonsAndGetLessons', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: await keyboards.speakingClubMenu()
        },
      });

      await set('state')('ActionClubRespondAndRootAction');
    }
    else if (data.text === '—Ç–∞–∫'){
      await set('temp-prev-state')('countCheck-state');
      ctx.reply(script.speakingClub.payPacketLesson, {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.payPacketLessons()
        },
      });
      await set('state')('RespondTypePacketAndGetPayment');
    }
    else if (data.text === '–Ω—ñ'){
      ctx.reply(script.speakingClub.trialLesson.ifNo, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–í –ú–ï–ù–Æ"
              }
            ],
          ],
        },
      });

      await set('state')('EndRootManager');
    }
  })

  // Pay Club Type
  onTextMessage('RespondTypePacketAndGetPayment', async(ctx, user, set, data) => {
    const prevState = user['temp-prev-state'],
      currentUser = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    if (CheckException.BackRoot(data) && prevState === 'clubList-state'){
      const results = await dbProcess.ShowAll();
      let addString : string = '';
    
      for (let i = 0; i < results.length; i++) {
          if (results[i].count > 0) {
            addString = `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}`;
          } else {
            addString = `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;
          }

        await ctx.reply(script.speakingClub.report.showClub(i + 1, results[i].title, dbProcess.getDateClub(new Date(results[i].teacher)), results[i].date, results[i].time, addString), {
          parse_mode: "HTML"
        });
      }

      await ctx.reply('–≤–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–ø—Ä–∞—Ö–∞ –¥–ª—è –∑–∞–ø–∏—Å—É:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('GetClubToRegistrationAndCheckPayment');
    }
    else if (CheckException.BackRoot(data) && prevState === 'menu-state'){
      ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: await keyboards.speakingClubMenu()
        },
      });

      await set('state')('ActionClubRespondAndRootAction');
    }
    else if (CheckException.BackRoot(data) && prevState === 'countCheck-state'){
      if (currentUser!.count > 0){
        ctx.reply(script.speakingClub.lessLessons(currentUser!.count), {
          parse_mode: "HTML",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: "–í –ú–ï–ù–Æ"
                },
              ]
            ],
          },
        });
        await set('state')('EndRootManager');
      }
      else{
        ctx.reply(script.speakingClub.lessLessons(currentUser!.count), {
          parse_mode: "HTML",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: "—Ç–∞–∫"
                },
                {
                  text: "–Ω—ñ"
                }
              ]
            ],
          },
        });
        await set('state')('RespondCheckLessonsAndGetLessons');
      }
    }
    else if (data.text === '–†–∞–∑–æ–≤–µ –∑–∞–Ω—è—Ç—Ç—è'){
      ctx.reply(script.speakingClub.onceClub);
      await set('club-typeclub')('–†–∞–∑–æ–≤–µ–ó–∞–Ω—è—Ç—Ç—è');
      await set('state')('RespondPaymentAndGetCourseOrFinal');
    }
    else if (data.text === '–®–ø—Ä–∞—Ö-–ö–ª—É–±'){
      ctx.reply(script.speakingClub.standartClub);
      await set('club-typeclub')(data.text);
      await set('state')('RespondPaymentAndGetCourseOrFinal');
    }
    else if (data.text === '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS'){
      ctx.reply(script.speakingClub.plusClub);
      await set('club-typeclub')(data.text);
      await set('state')('RespondPaymentAndGetCourseOrFinal');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.payPacketLessons()
        },
      })
    }
  })

  onPhotoMessage('RespondPaymentAndGetCourseOrFinal', async(ctx, user, set, data) => {
    const id = ctx?.chat?.id ?? -1,
      get = db.get(id),
      clubIndex = user['sc_request_torecord_usertoclub'];

    if (CheckException.BackRoot(data)){
      ctx.reply(script.speakingClub.payPacketLesson, {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.payPacketLessons()
        },
      });
      await set('state')('RespondTypePacketAndGetPayment');
    }
    else if (CheckException.PhotoException(data)){
      await set('paymentStatusClubOrPacket')('unknown');
      const paymentStatus = await get('paymentStatusClubOrPacket') ?? 'unknown',
        unique_file_id = data.photo[0];
  
      if (user['club-typeclub'] === '–†–∞–∑–æ–≤–µ–ó–∞–Ω—è—Ç—Ç—è'){
        const date = DateRecord();
        if (clubIndex !== ''){
          const inline = inlineAcceptOncePayment(id, clubIndex, paymentStatus, date);

          await ctx.telegram.sendPhoto(devChat, unique_file_id, {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.Once(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })

          await ctx.telegram.sendPhoto(supportChat, unique_file_id, {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.Once(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })
        }
        else{
          const inline = inlineAcceptOncePaymentWithoutClub(id, paymentStatus, date);

          // await ctx.telegram.sendPhoto(devChat, unique_file_id, {
          //   parse_mode: "HTML",
          //   caption: script.speakingClub.report.forAcceptPayment.Once(user['name'], user['username'], user['phone_number'], date),
          //   ...Markup.inlineKeyboard(inline)
          // })

          await ctx.telegram.sendPhoto(supportChat, unique_file_id, {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.Once(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })
        }

        await ctx.reply('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', {
          parse_mode: "Markdown",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: '–í –ú–ï–ù–Æ',
                },
                {
                  text: "–ù–∞–∑–∞–¥ –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"
                }
                // {
                //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
                // }
              ],
            ],
          },
        })

        await set('state')('EndRootManager');
      }
      else if (user['club-typeclub'] === '–®–ø—Ä–∞—Ö-–ö–ª—É–±'){
        const date = DateRecord();
        if (clubIndex !== ''){
          const inline = inlineAcceptClubWithPacketPayment(id, clubIndex, paymentStatus, 's', date);

          // packet and club
          // For Developer
          // await ctx.telegram.sendPhoto(devChat, unique_file_id, {
          //   parse_mode: "HTML",
          //   caption: script.speakingClub.report.forAcceptPayment.nonPlus(user['name'], user['username'], user['phone_number'], date),
          //   ...Markup.inlineKeyboard(inline)
          // })

          await ctx.telegram.sendPhoto(supportChat, unique_file_id, {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.nonPlus(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })
        }
        else{
          const inline = inlineAcceptPacketPayment(id, paymentStatus, 's');

          //packet
          // For Developer
          // await ctx.telegram.sendPhoto(devChat, unique_file_id, {
          //   parse_mode: "HTML",
          //   caption: script.speakingClub.report.forAcceptPayment.nonPlus(user['name'], user['username'], user['phone_number'], date),
          //   ...Markup.inlineKeyboard(inline)
          // })

          await ctx.telegram.sendPhoto(supportChat, unique_file_id, {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.nonPlus(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })
        }
        
        await ctx.reply('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', {
          parse_mode: "Markdown",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: '–í –ú–ï–ù–Æ',
                },
                {
                  text: "–ù–∞–∑–∞–¥ –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"
                }
                // {
                //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
                // }
              ],
            ],
          },
        })

        await set('state')('EndRootManager');
      }
      else if (user['club-typeclub'] === '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS'){
        await set('sc_clubplus_proof')(data.photo[0]);
        await set('sc_clubplus_typeproof')('photo');
        ctx.reply(script.speakingClub.thanksType.typePlus, {
          parse_mode: "Markdown",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.coursesTeacherOnHour()
          },
        });
        await set('state')('RespondCourseAndGetMail')
      }
      else{
        ctx.reply(user['club-typeclub']);
      }
    }
    else if (CheckException.FileException(data)){
      await set('paymentStatusClubOrPacket')('unknown');
      const paymentStatus = await get('paymentStatusClubOrPacket') ?? 'unknown';

      if (user['club-typeclub'] === '–†–∞–∑–æ–≤–µ–ó–∞–Ω—è—Ç—Ç—è'){
        const date = DateRecord();
        if (clubIndex !== ''){
          const inline = inlineAcceptOncePayment(id, clubIndex, paymentStatus, date);

          // For Developer
          // await ctx.telegram.sendDocument(devChat, data.file, {
          //   parse_mode: "HTML",
          //   caption: script.speakingClub.report.forAcceptPayment.Once(user['name'], user['username'], user['phone_number'], date),
          //   ...Markup.inlineKeyboard(inline)
          // })

          await ctx.telegram.sendDocument(supportChat, data.file[0], {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.Once(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })
        }
        else{
          const inline = inlineAcceptOncePaymentWithoutClub(id, paymentStatus, date);

          // For Developer
          // await ctx.telegram.sendDocument(devChat, data.file, {
          //   parse_mode: "HTML",
          //   caption: script.speakingClub.report.forAcceptPayment.Once(user['name'], user['username'], user['phone_number'], date),
          //   ...Markup.inlineKeyboard(inline)
          // })

          await ctx.telegram.sendDocument(supportChat, data.file[0], {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.Once(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })
        }
      }
      else if (user['club-typeclub'] === '–®–ø—Ä–∞—Ö-–ö–ª—É–±'){
        const date = DateRecord();
        if (clubIndex !== ''){
          const inline = inlineAcceptClubWithPacketPayment(id, clubIndex, paymentStatus, "s", DateRecord());

          // For Developer
          // ctx.telegram.sendDocument(devChat, data.file, {
          //   parse_mode: "HTML",
          //   caption: script.speakingClub.report.forAcceptPayment.nonPlus(user['name'], user['username'], user['phone_number'], date),
          //   ...Markup.inlineKeyboard(inline)
          // })

          ctx.telegram.sendDocument(supportChat, data.file[0], {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.nonPlus(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })
        }
        else{
          const inline = inlineAcceptPacketPayment(id, paymentStatus, 's');

          // For Developer
          // ctx.telegram.sendDocument(devChat, data.file, {
          //   parse_mode: "HTML",
          //   caption: script.speakingClub.report.forAcceptPayment.nonPlus(user['name'], user['username'], user['phone_number'], date),
          //   ...Markup.inlineKeyboard(inline)
          // })

          ctx.telegram.sendDocument(supportChat, data.file[0], {
            parse_mode: "HTML",
            caption: script.speakingClub.report.forAcceptPayment.nonPlus(user['name'], user['username'], user['phone_number'], date),
            ...Markup.inlineKeyboard(inline)
          })
        }

        ctx.reply('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', {
          parse_mode: "Markdown",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: '–í –ú–ï–ù–Æ',
                },
                {
                  text: "–ù–∞–∑–∞–¥ –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"
                }
                // {
                //   text: 'Ôºü–ü—Ä–æ –ë–æ—Ç–∞'
                // }
              ],
            ],
          },
        })
        await set('state')('EndRootManager');
      }
      else if (user['club-typeclub'] === '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS'){
        await set('sc_clubplus_proof')(data.file[0]);
        await set('sc_clubplus_typeproof')('file');
        ctx.reply(script.speakingClub.thanksType.typePlus, {
          parse_mode: "Markdown",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.coursesTeacherOnHour()
          },
        });
        await set('state')('RespondCourseAndGetMail')
      }
      else{
        ctx.reply(user['club-typeclub']);
      }
    }
    else{
      ctx.reply(script.errorException.paymentGettingError, {reply_markup: {remove_keyboard: true}});
    }
  })

  onTextMessage('RespondCourseAndGetMail', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply(script.speakingClub.plusClub, {reply_markup: {remove_keyboard: true}});
      await set('state')('RespondPaymentAndGetCourseOrFinal');
    }
    else if (data.text === 'A1.1' || data.text === 'A1.2' || data.text === 'A2.1' || data.text === 'A2.2'){
      await set('club-coursename')(data.text);

      ctx.reply(script.speakingClub.getMail, {reply_markup: {remove_keyboard: true}});
      await set('state')('RespondMailAndFinal');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.coursesTeacherOnHour()
        },
      });
    }
  })

  onTextMessage('RespondMailAndFinal', async(ctx, user, set, data) => {
    const get = db.get(ctx?.chat?.id ?? -1);
    //set mail

    if (CheckException.BackRoot(data)){
      ctx.reply(script.speakingClub.thanksType.typePlus, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.coursesTeacherOnHour()
        },
      });
      await set('state')('RespondCourseAndGetMail')
    }
    else if (CheckException.TextException(data)){
      await set('paymentStatusClubOrPacket')('unknown');
      const paymentStatus = await get('paymentStatusClubOrPacket') ?? 'unknown',
        typeOfProof = user['sc_clubplus_typeproof'],
        course = user['club-coursename'];

      if (await dbProcess.SetMailForUser(ctx?.chat?.id ?? -1, data.text)){
        await set('sc_local_user_mail')(data.text);
        const date = DateRecord();
        if (user['sc_request_torecord_usertoclub'] !== ''){
          if (typeOfProof === 'photo'){
            const inline = inlineAcceptClubWithPacketPayment(ctx?.chat?.id ?? -1, user['sc_request_torecord_usertoclub'], paymentStatus, 'p', DateRecord());
  
            // For Developer
            // ctx.telegram.sendPhoto(devChat, user['sc_clubplus_proof'], {
            //   parse_mode: "HTML",
            //   caption: script.speakingClub.report.forAcceptPayment.Plus(user['name'], user['username'], user['phone_number'], data.text, course, date),
            //   ...Markup.inlineKeyboard(inline)
            // })

            ctx.telegram.sendPhoto(supportChat, user['sc_clubplus_proof'], {
              parse_mode: "HTML",
              caption: script.speakingClub.report.forAcceptPayment.Plus(user['name'], user['username'], user['phone_number'], data.text, course, date),
              ...Markup.inlineKeyboard(inline)
            })
          }
          else{
            const inline = inlineAcceptClubWithPacketPayment(ctx?.chat?.id ?? -1, user['sc_request_torecord_usertoclub'], paymentStatus, 'p', DateRecord());
  
            // For Developer
            // ctx.telegram.sendDocument(devChat, user['sc_clubplus_proof'], {
            //   parse_mode: "HTML",
            //   caption: script.speakingClub.report.forAcceptPayment.Plus(user['name'], user['username'], user['phone_number'], data.text, course, date),
            //   ...Markup.inlineKeyboard(inline)
            // })

            ctx.telegram.sendDocument(supportChat, user['sc_clubplus_proof'], {
              parse_mode: "HTML",
              caption: script.speakingClub.report.forAcceptPayment.Plus(user['name'], user['username'], user['phone_number'], data.text, course, date),
              ...Markup.inlineKeyboard(inline)
            })
          }

          await set('sc_request_torecord_usertoclub')('');
        }
        else{
          if (typeOfProof === 'photo'){
            const inline = inlineAcceptPacketPayment(ctx?.chat?.id ?? -1, paymentStatus, 'plus');

            // For Developer
            // ctx.telegram.sendPhoto(devChat, user['sc_clubplus_proof'], {
            //   parse_mode: "HTML",
            //   caption: script.speakingClub.report.forAcceptPayment.Plus(user['name'], user['username'], user['phone_number'], data.text, course, date),
            //   ...Markup.inlineKeyboard(inline)
            // })

            ctx.telegram.sendPhoto(supportChat, user['sc_clubplus_proof'], {
              parse_mode: "HTML",
              caption: script.speakingClub.report.forAcceptPayment.Plus(user['name'], user['username'], user['phone_number'], data.text, course, date),
              ...Markup.inlineKeyboard(inline)
            })
          }
          else{
            const inline = inlineAcceptPacketPayment(ctx?.chat?.id ?? -1, paymentStatus, 'plus');

            // For Developer
            // ctx.telegram.sendDocument(devChat, user['sc_clubplus_proof'], {
            //   parse_mode: "HTML",
            //   caption: script.speakingClub.report.forAcceptPayment.Plus(user['name'], user['username'], user['phone_number'], data.text, course, date),
            //   ...Markup.inlineKeyboard(inline)
            // })

            ctx.telegram.sendDocument(supportChat, user['sc_clubplus_proof'], {
              parse_mode: "HTML",
              caption: script.speakingClub.report.forAcceptPayment.Plus(user['name'], user['username'], user['phone_number'], data.text, course, date),
              ...Markup.inlineKeyboard(inline)
            })
          }
        }
  
        ctx.reply(script.speakingClub.thanksAfterMail(user['name'], user['club-coursename']), {
          parse_mode: "HTML",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: "–í –ú–ï–ù–Æ",
                },
                {
                  text: "–ù–∞–∑–∞–¥ –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
                }
              ],
            ],
          },
        });
  
        await set('state')('EndRootManager');
      }
      else{
        ctx.reply(script.errorException.textGettingError.mailException, {reply_markup: {remove_keyboard: true}});
      }
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException, {reply_markup: {remove_keyboard: true}});
    }
  })

  //Club Registration (start)
  onTextMessage('GetClubToRegistrationAndCheckPayment', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAll(),
      currentUser = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    if (CheckException.BackRoot(data)){
      ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: await keyboards.speakingClubMenu()
        },
      });

      await set('state')('ActionClubRespondAndRootAction');
    }
    else if (currentUser!.count > 0){
      if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 1 && parseInt(data.text) <= results.length + 1){
        const currentItemIndex = results.map(item => item._id)[parseInt(data.text) - 1],
          currentClub = await dbProcess.ShowData(currentItemIndex),
          currentUser = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1),
          users = await dbProcess.ShowAllUsers();

        let recordedUsers = '';
  
        if (currentClub!.count > 0){
          if (!await dbProcess.HasThisClubUser(ctx?.chat?.id ?? -1, currentItemIndex)){
            await dbProcess.ChangeCountUser(currentUser!._id, currentUser!.count - 1);
            await dbProcess.ChangeKeyData(currentClub!, 'count', currentClub!.count - 1);
            await dbProcess.WriteNewClubToUser(ctx?.chat?.id ?? -1, currentClub!._id);

            for(let i = 0; i < users.length; i++){
              if (await dbProcess.HasThisClubUser(users[i].id, currentClub!._id)){
                recordedUsers += `- ${users[i].name} (@${users[i].username})\nüì≤${users[i].number}\n\n`;
              }
            }
        
            //Send Message To Teacher
            await ctx.telegram.sendMessage(currentClub!.teacher_id, script.speakingClub.report.reportToTeacherNewOrder(currentClub!.title, currentClub!.teacher, 
              dbProcess.getDateClub(new Date(currentClub!.date)), currentClub!.time, currentClub!.count - 1, recordedUsers));
            
            await ctx.reply('–û–±—Ä–æ–±–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...');

            if (currentUser!.count === 1){
              // For Developer
              await ctx.telegram.sendMessage(devChat, script.speakingClub.report.notEnoughLessons(
                user['name'], user['username'], user['phone_number'], currentUser!.email !== undefined ? currentUser!.email : "–ü–æ—à—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è", user['club-typeclub']
              ));
                
              await ctx.telegram.sendMessage(confirmationChat, script.speakingClub.report.notEnoughLessons(
                user['name'], user['username'], user['phone_number'], currentUser!.email !== undefined ? currentUser!.email : "–ü–æ—à—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è", user['club-typeclub']
              ));
                
              // await sheets.changeAvaibleLessonStatus(ctx?.chat?.id ?? -1, false);
            }
            
            await ctx.reply(script.speakingClub.registrationLesson.acceptedRegistration(user['name'], dbProcess.getDateClub(new Date(currentClub!.date)), 
            currentClub!.time, currentClub!.link), {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: await keyboards.speakingClubMenu()
              }
            });
            
            await ctx.telegram.sendDocument(ctx?.chat?.id ?? -1, currentClub!.documentation, {
              caption: `–æ—Å—å —Ñ–∞–π–ª —ñ–∑ –ª–µ–∫—Å–∏–∫–æ—é, —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –Ω–∞ —à–ø—Ä–∞—Ö-–∫–ª—É–±—ñ ;)`}
            )

            // await sheets.appendLessonToUser(currentUser!.id, currentUser!.name, currentUser!.number, currentUser!.username, currentUser!.email !== undefined ? currentUser!.email : '–ø–æ—à—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è',
            //   DateRecord(), currentClub!.title, currentClub!.teacher);

            await set('state')('ActionClubRespondAndRootAction');
          }
          else{
            ctx.reply('–≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü–µ–π —à–ø—Ä–∞—Ö! –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π', {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
                  return [{ text: `${index + 1}` }];
                })
              }
            });
          }
        }
        else{
          ctx.reply('—É —Ü—å–æ–≥–æ —à–ø—Ä–∞—Ö—É –≤—ñ–¥—Å—É—Ç–Ω—ñ –º—ñ—Å—Ü—è! –æ–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—à–∏–π', {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
                return [{ text: `${index + 1}` }];
              })
            }
          })
        }
      }
      else{
        ctx.reply(script.errorException.chooseButtonError, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
              return [{ text: `${index + 1}` }];
            })
          }
        })
      }
    }
    else{
      if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 1 && parseInt(data.text) <= results.length + 1){
        const currentItemIndex = results.map(item => item._id)[parseInt(data.text) - 1],
          currentClub = await dbProcess.ShowData(currentItemIndex);
  
        if (currentClub!.count > 0){
          if (!await dbProcess.HasThisClubUser(ctx?.chat?.id ?? -1, currentItemIndex)){
            await set('sc_request_torecord_usertoclub')(currentItemIndex!.toString());
            ctx.reply(script.speakingClub.registrationLesson.paymentRequest(user['name']), {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: [
                  [
                    {
                      text: "—Ç–∞–∫"
                    },
                    {
                      text: "–Ω—ñ"
                    }
                  ]
                ]
              }
            })

            await set('state')('RegistrationChooseHandlerPayment');
          }
          else{
            ctx.reply('–≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü–µ–π —à–ø—Ä–∞—Ö! –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π', {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
                  return [{ text: `${index + 1}` }];
                })
              }
            });
          }
        }
        else{
          ctx.reply('—É —Ü—å–æ–≥–æ —à–ø—Ä–∞—Ö—É –≤—ñ–¥—Å—É—Ç–Ω—ñ –º—ñ—Å—Ü—è! –æ–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—à–∏–π', {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
                return [{ text: `${index + 1}` }];
              })
            }
          })
        }
      }
      else{
        ctx.reply(script.errorException.chooseButtonError, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
              return [{ text: `${index + 1}` }];
            })
          }
        })
      }
    }
  })

  onTextMessage('RegistrationChooseHandlerPayment', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      const results = await dbProcess.ShowAll();
      let addString : string = '';
    
      for (let i = 0; i < results.length; i++) {
          if (results[i].count > 0) {
            addString = `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}`;
          } else {
            addString = `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;
          }

        await ctx.reply(script.speakingClub.report.showClub(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString), {
          parse_mode: "HTML"
        });
      }

      await ctx.reply('–≤–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–ø—Ä–∞—Ö–∞ –¥–ª—è –∑–∞–ø–∏—Å—É:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('GetClubToRegistrationAndCheckPayment');
    }
    else if (data.text === '—Ç–∞–∫'){
      ctx.reply(script.speakingClub.payPacketLesson, {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.payPacketLessons()
        },
      });
      await set('temp-prev-state')('clubList-state');
      await set('state')('RespondTypePacketAndGetPayment');
    }
    else if (data.text === '–Ω—ñ'){
      ctx.reply(script.speakingClub.defaultDecline, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–í –ú–ï–ù–Æ"
              }
            ]
          ]
        }
      });

      await set('state')('EndRootManager');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError);
    }
  })

  // Admin Root Handler
  onTextMessage('AdminRootHandler', async(ctx, user, set, data) => {
    const userObject = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);

    if (CheckException.BackRoot(data)){
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userObject!.role)
        }
      })

      await set('state')('FunctionRoot');
    }
    else if (data.text === '–®–ø—Ä–∞—Ö-–ö–ª—É–±–∏'){
      ctx.reply("–î–æ–±—Ä–µ–Ω—å–∫–æ, —ñ —â–æ –Ω–∞ —Ü–µ–π —Ä–∞–∑?)", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.spekingClubAdminPanel()
        },
      })

      await set('state')('RespondAdminActionAndRootChoose');
    }
    else if (data.text === '–û—Å–æ–±–æ–≤—ñ —Å–ø—Ä–∞–≤–∏'){
      ctx.reply('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –Ω–∞–¥ –∫–∏–º —Å—å–æ–≥–æ–¥–Ω—ñ –±—É–¥–µ–º–æ –∑–Ω—É—â–∞—Ç–∏—Å—å?)', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (data.text === '–í –ú–ï–ù–Æ'){
      const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
        }
      })

      await set('state')('FunctionRoot');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–®–ø—Ä–∞—Ö-–ö–ª—É–±–∏"
              },
              {
                text: "–û—Å–æ–±–æ–≤—ñ —Å–ø—Ä–∞–≤–∏"
              }
            ],[
              {
                text: "–í –ú–ï–ù–Æ"
              }
            ]
          ],
        }}
      );
    }
  })

  // Admin Panel (start)
  onTextMessage('RespondAdminActionAndRootChoose', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, –ú–µ—Ä–∫–µ–ª—å! :)", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–®–ø—Ä–∞—Ö-–ö–ª—É–±–∏"
              },
              {
                text: "–û—Å–æ–±–æ–≤—ñ —Å–ø—Ä–∞–≤–∏"
              }
            ],[
              {
                text: "–í –ú–ï–ù–Æ"
              }
            ]
          ],
        },
      })

      await set('state')('AdminRootHandler');
    }
    else if (data.text === '–î–æ–¥–∞—Ç–∏'){
      ctx.reply("–¢–µ–º–∞:");
      await set('state')('ADD_RespondTitleAndGetTeacher');
    }
    else if (data.text === '–í–∏–¥–∞–ª–∏—Ç–∏'){
      const results = await dbProcess.ShowAll(),
        users = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        let userHaved : string = '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n';
        for (let j = 0; j < users.length; j++) {
          if (await dbProcess.HasThisClubUser(users[j].id, results[i]._id)){
            userHaved += `- ${users[j].name} (@${users[j].username}) - ${ConvertToPrice((await db.get(users[j].id)('club-typeclub'))!)} uah.\nüì≤${users[j].number}\n\n`;
          }
        }
          if (userHaved === '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n'){
            userHaved = '';
          }

          let addString = results[i].count > 0 ? `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}` : `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;

        await ctx.reply(script.speakingClub.report.showClubTypeAdmin(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString, userHaved, results[i].link), {
          parse_mode: "HTML"
        });
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–ø—Ä–∞—Ö–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('DeleteClubAndCheckAction');
    }
    else if (data.text === '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏'){
      const results = await dbProcess.ShowAll(),
        users = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        let userHaved : string = '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n';
        for (let j = 0; j < users.length; j++) {
          if (await dbProcess.HasThisClubUser(users[j].id, results[i]._id)){
            userHaved += `- ${users[j].name} (@${users[j].username}) - ${ConvertToPrice((await db.get(users[j].id)('club-typeclub'))!)} uah.\nüì≤${users[j].number}\n\n`;
          }
        }
          if (userHaved === '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n'){
            userHaved = '';
          }

          let addString = results[i].count > 0 ? `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}` : `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;

        await ctx.reply(script.speakingClub.report.showClubTypeAdmin(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString, userHaved, results[i].link), {
          parse_mode: "HTML"
        });
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–ø—Ä–∞—Ö–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('RespondKeyDataAndGetChanges');
    }
    else if (data.text === '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ'){
      const results = await dbProcess.ShowAll(),
        users = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        let userHaved : string = '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n';
        for (let j = 0; j < users.length; j++) {
          if (await dbProcess.HasThisClubUser(users[j].id, results[i]._id)){
            userHaved += `- ${users[j].name} (@${users[j].username}) - ${ConvertToPrice((await db.get(users[j].id)('club-typeclub'))!)} uah.\nüì≤${users[j].number}\n\n`;
          }
        }
        if (userHaved === '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n'){
          userHaved = '';
        }

        let addString = results[i].count > 0 ? `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}` : `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;

        await ctx.telegram.sendDocument(ctx?.chat?.id ?? -1, results[i].documentation, {
          parse_mode: "HTML",
          caption: script.speakingClub.report.showClubTypeAdmin(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString, userHaved, results[i].link),
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.spekingClubAdminPanel()
          }
        });
      }
    }
    else if (data.text === '–í –ú–ï–ù–Æ'){
      const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
        }
      })

      await set('state')('FunctionRoot');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.spekingClubAdminPanel()
        },
      })
    }
  });

  //Add Method
  onTextMessage('ADD_RespondTitleAndGetTeacher', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–î–æ–±—Ä–µ–Ω—å–∫–æ, —ñ —â–æ –Ω–∞ —Ü–µ–π —Ä–∞–∑?)", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.spekingClubAdminPanel()
        },
      })

      await set('state')('RespondAdminActionAndRootChoose');
    }
    else if (CheckException.TextException(data)){
      await set('AP_title')(data.text);

      const users = await dbProcess.ShowAllUsers();
      let keyboard = [];

      for (let i = 0; i < users.length; i++){
        if (users[i].role === 'teacher'){
          keyboard.push([{ text: users[i].name }]);
        }
      }

      ctx.reply('–í—á–∏—Ç–µ–ª—å:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboard
        }
      });
      await set('state')('ADD_RespondTeacherAndGetDate');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException, {reply_markup: {remove_keyboard: true}});
    }
  })

  onTextMessage('ADD_RespondTeacherAndGetDate', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–¢–µ–º–∞:", {reply_markup: {remove_keyboard: true}});
      await set('state')('ADD_RespondTitleAndGetTeacher');
    }
    else if (CheckException.TextException(data)){
      if (await dbProcess.GetTeacherBool(data.text)){
        const teacher = await dbProcess.GetTeacherNameAndID(data.text, true);
        await set("AP_teacher_name")(teacher[0]);
        await set("AP_teacher_id")(teacher[1]);
  
        ctx.reply('–ö–æ–ª–∏ (–¥–µ–Ω—å):');
        await set('state')('ADD_RespondDateDayAndGetDateMonth');
      }
      else{
        const users = await dbProcess.ShowAllUsers();
        let keyboard = [];

        for (let i = 0; i < users.length; i++){
          if (users[i].role === 'teacher'){
            keyboard.push([{ text: users[i].name }]);
          }
        }
          ctx.reply('–≤–∏–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞ –≤—á–∏—Ç–µ–ª—è', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboard
          }
        })
      }
    }
    else{
      ctx.reply(script.errorException.chooseButtonError);
    }
  })

  onTextMessage('ADD_RespondDateDayAndGetDateMonth', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      const users = await dbProcess.ShowAllUsers();
      let keyboard = [];

      for (let i = 0; i < users.length; i++){
        if (users[i].role === 'teacher'){
          keyboard.push([{ text: users[i].name }]);
        }
      }

      ctx.reply('–í—á–∏—Ç–µ–ª—å:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboard
        }
      });

      await set('state')('ADD_RespondTeacherAndGetDate');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && dbProcess.isValidInput(data.text, false)){
      if (parseInt(data.text) <= 31 && parseInt(data.text) >= 1){
        await set('AP_date_day')(data.text);
  
        ctx.reply('–ö–æ–ª–∏ (–º—ñ—Å—è—Ü—å):');
        await set('state')('ADD_RespondDateMonthAndGetDateYear');
      }
      else{
        ctx.reply(`–ê —î —Ç–∞–∫–∏–π –¥–µ–Ω—å, —è–∫ ${data.text}?\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑.`);
      }
    }
    else{
      ctx.reply('–¶–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–≤—É—Ö–∑–Ω–∞—á–Ω–∞ —Ü–∏—Ñ—Ä–∞');
    }
  })

  onTextMessage('ADD_RespondDateMonthAndGetDateYear', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–ö–æ–ª–∏ (–¥–µ–Ω—å):', {reply_markup: {remove_keyboard: true}});
      await set('state')('ADD_RespondDateDayAndGetDateMonth');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && dbProcess.isValidInput(data.text, false)){
      if (parseInt(data.text) <= 12 && parseInt(data.text) >=1){
        await set('AP_date_month')(data.text);
  
        ctx.reply('–ö–æ–ª–∏ (—Ä—ñ–∫):');
        await set('state')('ADD_RespondDateAndGetTime');
      }
      else{
        ctx.reply(`–°–µ—Ä–π–æ–∑–Ω–æ? –ú—ñ—Å—è—Ü—å ${data.text}?\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑.`);
      }
    }
    else{
      ctx.reply('–¶–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–≤—É—Ö–∑–Ω–∞—á–Ω–∞ —Ü–∏—Ñ—Ä–∞');
    }
  })

  onTextMessage('ADD_RespondDateAndGetTime', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–ö–æ–ª–∏ (–º—ñ—Å—è—Ü—å):');
      await set('state')('ADD_RespondDateMonthAndGetDateYear');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && dbProcess.isValidInput(data.text, true)){
      const currentDate = new Date();
      if (new Date(`${parseInt(data.text)}-${user['AP_date_month']}-${user['AP_date_day']}`) >= new Date(`${currentDate.getFullYear}-${currentDate.getMonth() + 1}-${currentDate.getDate()}`)){
        if (currentDate.getFullYear() + 1 >= parseInt(data.text)){
          await set('AP_date_year')(data.text);
    
          ctx.reply('–ß–∞—Å (–≥–æ–¥–∏–Ω–∏):');
          await set('state')('ADD_RespondTimeHourAndGetMinute');
        }
        else{
          ctx.reply(`–û–≥–æ, —Ç–æ —Ü–µ —Ç–∞–∫—ñ –±—É–¥—É—Ç—å –∫–ª–∞–±–∏ –≤ ${data.text}! –î—É–∂–µ —Ü—ñ–∫–∞–≤–æ!)\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑`);
        }
      }
      else{
        ctx.reply('–û —Ç–æ —Ü–µ –∫–ª–∞–± –∑ –º–∏–Ω—É–ª–æ–≥–æ! –ü—Ä–∏—î–º–Ω—ñ —Å–ø–æ–≥–∞–¥–∏)\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑');
      }
    }
    else{
      ctx.reply('–¶–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–æ—Ç—Ä—å–æ—Ö–∑–Ω–∞—á–Ω–∞ —Ü–∏—Ñ—Ä–∞');
    }
  })

  onTextMessage('ADD_RespondTimeHourAndGetMinute', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–ö–æ–ª–∏ (—Ä—ñ–∫):');
      await set('state')('ADD_RespondDateAndGetTime');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && dbProcess.isValidInput(data.text, false)){
      if (parseInt(data.text) <= 23 && parseInt(data.text) >= 4){
        await set('AP_time_hour')(data.text);
  
        ctx.reply('–ß–∞—Å (—Ö–≤–∏–ª–∏–Ω–∏):');
        await set('state')('ADD_RespondTimeAndGetCount');
      }
      else{
        ctx.reply(`–°–∫—ñ–∫–æ? –ë–∞–±–∞ –Ω–µ —á—É—î! –Ø–∫ —Ü–µ ${data.text}\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑`);
      }
    }
    else{
      ctx.reply('–¶–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–≤—É—Ö–∑–Ω–∞—á–Ω–∞ —Ü–∏—Ñ—Ä–∞');
    }
  })

  onTextMessage('ADD_RespondTimeAndGetCount', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–ß–∞—Å (–≥–æ–¥–∏–Ω–∏):');
      await set('state')('ADD_RespondTimeHourAndGetMinute'); 
    }
    else if (CheckException.TextException(data)){
      if (parseInt(data.text) >= 0 && parseInt(data.text) <= 59){
        await set('AP_time_minute')(data.text);
  
        ctx.reply('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å:');
        await set('state')('ADD_RespondCountAndGetLink');
      }
      else{
        ctx.reply('–Ø —Å—Ç—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω —â–µ –Ω–µ –±–∞—á–∏–≤...\n\n–ü–æ–≤—ñ—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑')
      }
    }
    else{
      ctx.reply('–¶–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–≤—É—Ö–∑–Ω–∞—á–Ω–∞ —Ü–∏—Ñ—Ä–∞');
    }
  })

  onTextMessage('ADD_RespondCountAndGetLink', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–ß–∞—Å (—Ö–≤–∏–ª–∏–Ω–∏):');
      await set('state')('ADD_RespondTimeAndGetCount');
    }
    else if (CheckException.TextException(data)){
      if (parseInt(data.text) <= 5 && parseInt(data.text) > 0){
        await set('AP_count')(data.text);
  
        ctx.reply('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:');
        await set('state')('ADD_RespondDocumentationAndGetLink');
      }
      else{
        ctx.reply('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 5-—Ç–∏ —ñ –º–µ–Ω—à–µ –∞–±–æ 0');
      }
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onDocumentationMessage('ADD_RespondDocumentationAndGetLink', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å:');
      await set('state')('ADD_RespondCountAndGetLink');
    }
    else if (CheckException.FileException(data)){
      await set('AP_documentation')(data.file[0]);

      ctx.reply('–ü–æ—Å–∏–ª–∞–Ω–Ω—è:');
      await set('state')('ADD_RespondLinkAndCheckRight');
    }
    else{
      ctx.reply('–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–π–ª —Ç–∏–ø—É PDF');
    }
  })

  onTextMessage('ADD_RespondLinkAndCheckRight', async(ctx, user, set, data) => {
    const datePart = `${user['AP_date_day']}-${user['AP_date_month']}-${user['AP_date_year']} (${dbProcess.getDateClub(new Date(`
        ${user['AP_date_year']}-${user['AP_date_month']}-${user['AP_date_day']}`))})`;

    if (CheckException.BackRoot(data)){
      ctx.reply('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:');
      await set('state')('ADD_RespondDocumentationAndGetLink');
    }
    else if (CheckException.TextException(data)){
      await set('AP_link')(data.text);

      await ctx.reply(script.speakingClub.report.checkClub(user['AP_title'], user['AP_teacher_name'], datePart, `${user['AP_time_hour']}:${user['AP_time_minute']}`, data.text, parseInt(user['AP_count'])))
      await ctx.reply("–í—Å–µ –≤—ñ—Ä–Ω–æ?", {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "—Ç–∞–∫",
              },
              {
                text: "–Ω—ñ",
              }
            ],
          ],
        },
      })

      await set('state')('ADD_CheckHandlerAndRoot');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('ADD_CheckHandlerAndRoot', async(ctx, user, set, data) => {
    const users = await dbProcess.ShowAllUsers();

    if (CheckException.BackRoot(data)){
      ctx.reply('–ü–æ—Å–∏–ª–∞–Ω–Ω—è:');
      await set('state')('ADD_RespondLinkAndCheckRight');
    }
    else if (data.text === '—Ç–∞–∫'){
      const toWrite = {
        title: user['AP_title'],
        teacher: user['AP_teacher_name'],
        teacher_id: user['AP_teacher_id'],
        date: `${user['AP_date_year']}-${user['AP_date_month']}-${user['AP_date_day']}`,
        time: `${user['AP_time_hour']}:${user['AP_time_minute']}`,
        count: parseInt(user['AP_count']),
        link: user['AP_link'],
        documentation: user['AP_documentation']
      }
      const currentData = await dbProcess.AddData(toWrite);

      for (let i = 0; i < users.length; i++){
        const inline = inlineEventAnnouncementClub(users[i].id, currentData.insertedId.toString());
        ctx.telegram.sendMessage(users[i].id, script.speakingClub.report.announcementClub(toWrite.title,
          toWrite.teacher, dbProcess.getDateClub(new Date(toWrite.date)), toWrite.time), 
          {
            reply_markup: {inline_keyboard: inline},
            parse_mode: 'HTML',
          },
        )
      }

      ctx.telegram.sendMessage(user['AP_teacher_id'], `–í–∏ –±—É–ª–∏ –¥–æ–¥–∞–Ω—ñ –Ω–∞ –∫–ª—É–± ${toWrite.title}`);
      await ctx.reply('–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!', {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–í –ú–ï–ù–Æ",
              }
            ],
          ],
        },
      })
      
      await set('state')('EndRootManager');
    }
    else if (data.text === '–Ω—ñ'){
      ctx.reply("–¢–µ–º–∞:");
      await set('state')('ADD_RespondTitleAndGetTeacher')
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        parse_mode: "HTML",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "—Ç–∞–∫",
              },
              {
                text: "–Ω—ñ",
              },
            ],
          ],
        },
      })
    }
  })

  // Delete Handler
  onTextMessage('DeleteClubAndCheckAction', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAll();

    if (CheckException.BackRoot(data)){
      ctx.reply("–î–æ–±—Ä–µ–Ω—å–∫–æ, —ñ —â–æ –Ω–∞ —Ü–µ–π —Ä–∞–∑?)", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.spekingClubAdminPanel()
        },
      })

      await set('state')('RespondAdminActionAndRootChoose');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 1 && parseInt(data.text) <= results.length) {
      await set('AP_DeleteHandler_indextodelete')(data.text);

      await ctx.reply(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª–∞–± ‚Ññ${data.text}?`, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "—Ç–∞–∫"
              },
              {
                text: "–Ω—ñ"
              }
            ]
          ],
        },
      });

      await set('state')('CheckingActionDeleteAndReturn');
    } 
    else {
      await ctx.reply('–ü–æ–º–∏–ª–∫–∞, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ, —Ç–∞–∫ —è–∫ —Ü—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –Ω–µ —ñ—Å–Ω—É—î.', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: (await dbProcess.ShowAll()).map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }]})
        }
      });
    }
  })

  onTextMessage('CheckingActionDeleteAndReturn', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAll(),
      users = await dbProcess.ShowAllUsers(),
      indexToDelete = user['AP_DeleteHandler_indextodelete'],
      deleteItem = results.map(result => result._id)[parseInt(indexToDelete) - 1],
      dataItem = await dbProcess.ShowData(deleteItem);

    if (CheckException.BackRoot(data)){
      const results = await dbProcess.ShowAll(),
        users = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        let userHaved : string = '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n';
        for (let j = 0; j < users.length; j++) {
          if (await dbProcess.HasThisClubUser(users[j].id, results[i]._id)){
            userHaved += `- ${users[j].name} (@${users[j].username}) - ${ConvertToPrice((await db.get(users[j].id)('club-typeclub'))!)} uah.\nüì≤${users[j].number}\n\n`;
          }
        }
          if (userHaved === '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n'){
            userHaved = '';
          }

          let addString = results[i].count > 0 ? `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}` : `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;

        await ctx.reply(script.speakingClub.report.showClubTypeAdmin(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString, userHaved, results[i].link), {
          parse_mode: "HTML"
        });
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–ø—Ä–∞—Ö–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('DeleteClubAndCheckAction');
    }
    else if (data.text === '—Ç–∞–∫'){
      dbProcess.DeleteData(deleteItem);

      await ctx.telegram.sendMessage(dataItem!.teacher_id, `‚ùå ${dataItem!.teacher}, –∫–ª—É–± ${dataItem!.title} (${dbProcess.getDateClub(new Date(dataItem!.date))} –æ ${dataItem!.time} üá∫üá¶) –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ñ –π–æ–≥–æ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î.`);
      for (let i = 0; i < users.length; i++){
        if (await dbProcess.HasThisClubUser(users[i].id, dataItem!._id)){
          await ctx.telegram.sendMessage(users[i].id, `‚ùå ${users[i].name}, –í–∏ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ –∫–ª—É–±—É ${dataItem!.title} (${dbProcess.getDateClub(new Date(dataItem!.date))} –æ ${dataItem!.time} üá∫üá¶), –æ—Å–∫—ñ–ª—å–∫–∏ –∫–ª—É–± –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π.`);
          await dbProcess.DeleteClubFromUser(users[i].id, deleteItem);
        }
      }

      await ctx.reply(`–®–ø—Ä–∞—Ö –∫–ª–∞–± ‚Ññ${indexToDelete} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.`, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.spekingClubAdminPanel()
        },
      });

      await set('state')('RespondAdminActionAndRootChoose');
    }
    else if (data.text === '–Ω—ñ'){
      await ctx.reply(`–ü–æ—Ç–æ—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–∞.`, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.spekingClubAdminPanel()
        },
      });

      await set('state')('RespondAdminActionAndRootChoose');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError);
    }
  })

  // Change Key Data
  onTextMessage('RespondKeyDataAndGetChanges', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAll();

    if (CheckException.BackRoot(data)){
      ctx.reply("–î–æ–±—Ä–µ–Ω—å–∫–æ, —ñ —â–æ –Ω–∞ —Ü–µ–π —Ä–∞–∑?)", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.spekingClubAdminPanel()
        },
      })

      await set('state')('RespondAdminActionAndRootChoose');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 1 && parseInt(data.text) <= results.length){
      await set('AP_respondkeydata_clubid')(data.text);
      console.log(results[parseInt(data.text) - 1].title);

      ctx.reply("–Ø–∫–∏–π —Å–∞–º–µ –ø—É–Ω–∫—Ç —Ç—Ä–µ –∑–º—ñ–Ω–∏—Ç–∏?", {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.adminPanelChangeClub()
        }
      });

      await set('state')('GetChangesAndChangeThis');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError);
    }
  })

  // Change Process
  onTextMessage('GetChangesAndChangeThis', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      const results = await dbProcess.ShowAll(),
        users = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        let userHaved : string = '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n';
        for (let j = 0; j < users.length; j++) {
          if (await dbProcess.HasThisClubUser(users[j].id, results[i]._id)){
            userHaved += `- ${users[j].name} (@${users[j].username}) - ${ConvertToPrice((await db.get(users[j].id)('club-typeclub'))!)} uah.\nüì≤${users[j].number}\n\n`;
          }
        }
          if (userHaved === '\n\n<b>üëâüèº–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b>\n'){
            userHaved = '';
          }

          let addString = results[i].count > 0 ? `<b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å</b>: ${results[i].count}` : `‚ùå –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å ‚ùå`;

        await ctx.reply(script.speakingClub.report.showClubTypeAdmin(i + 1, results[i].title, results[i].teacher, dbProcess.getDateClub(new Date(results[i].date)), results[i].time, addString, userHaved, results[i].link), {
          parse_mode: "HTML"
        });
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–ø—Ä–∞—Ö–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('RespondKeyDataAndGetChanges');
    }
    else if (Key(data.text) !== null){
      await set('AP_keyforchange')(Key(data.text)!);
      await set('AP_keyforchange_services')(data.text);

      if (data.text === '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è'){
        ctx.reply("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª");
        await set('state')('ChangeThisDocAndCheckThis');
      }
      else if (data.text === '–î–∞—Ç–∞'){
        ctx.reply("–í–≤–µ–¥—ñ—Ç—å –¥–µ–Ω—å:");
        await set('state')('ChangeDateDayAndGetChangeMonth');
      }
      else if (data.text === '–ß–∞—Å'){
        ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≥–æ–¥–∏–Ω–∏');
        await set('state')('ChangeTimeHourAndGetChangeMinute');
      }
      else if (data.text === '–í–∏–∫–ª–∞–¥–∞—á'){
        const users = await dbProcess.ShowAllUsers();
        let teachers = [];

        for(let i = 0; i < users.length; i++){
          if (users[i].role === 'teacher'){
            teachers.push([{text: users[i].name}])
          }
        }

        ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏–∫–ª–∞–¥–∞—á–∞', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: teachers
          }
        })

        await set('state')('ChangeTeacherAndSubmit');
      }
      else{
        ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –¥–∞–Ω—ñ");
        await set('state')('ChangeThisAndCheckThis');
      }
    }
    else{
      ctx.reply("–ü–æ–º–∏–ª–∫–∞", {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.adminPanelChangeClub()
        }
      });
    }
  })

  onTextMessage('ChangeThisAndCheckThis', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAll(),
      currentItem = results.map(result => result._id);

    if (CheckException.BackRoot(data)){
      ctx.reply("–Ø–∫–∏–π —Å–∞–º–µ –ø—É–Ω–∫—Ç —Ç—Ä–µ –∑–º—ñ–Ω–∏—Ç–∏?", {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.adminPanelChangeClub()
        }
      });

      await set('state')('GetChangesAndChangeThis');
    }
    else if (CheckException.TextException(data)){
      if (user['AP_keyforchange'] === 'count'){
        if (parseInt(data.text) > 5){
          ctx.reply('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–∂–ª–∏–≤–∏—Ö –º—ñ—Å—Ü—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 5-—Ç–∏');
        }
        else if (parseInt(data.text) < 0){
          ctx.reply('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–∂–ª–∏–≤–∏—Ö –º—ñ—Å—Ü—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–µ 0-—è');
        }
        else{
          const getCurrentClub: (MongoDBReturnType | Object | null)[] = [
            await dbProcess.ShowData(currentItem[parseInt(user['AP_respondkeydata_clubid']) - 1]),
            dbProcess.GetObject(currentItem[parseInt(user['AP_respondkeydata_clubid']) - 1])
          ], keyForChange = user['AP_keyforchange'];
    
          await set('AP_prev_keyvalue(backup)')(Array(getCurrentClub[0]).filter((club): club is MongoDBReturnType => typeof club === 'object')
          .map((club) => club[keyForChange as keyof MongoDBReturnType].toString()).join(''));
    
          await set('AP_keydatatochange')(data.text);
    
          await dbProcess.ChangeKeyData(dbProcess.GetObject(currentItem[parseInt(user['AP_respondkeydata_clubid'])]), keyForChange, parseInt(data.text));
          ctx.reply('–£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!', {
            parse_mode: "Markdown",
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.spekingClubAdminPanel()
            },
          });

          await set('state')('RespondAdminActionAndRootChoose');
        }
      }
      else{
        const getCurrentClub: (MongoDBReturnType | Object | null)[] = [
          await dbProcess.ShowData(currentItem[parseInt(user['AP_respondkeydata_clubid']) - 1]),
          dbProcess.GetObject(currentItem[parseInt(user['AP_respondkeydata_clubid']) - 1])
        ], keyForChange = user['AP_keyforchange'], keyForChangeService = user['AP_keyforchange_services'];
  
        await set('AP_prev_keyvalue(backup)')(Array(getCurrentClub[0]).filter((club): club is MongoDBReturnType => typeof club === 'object')
        .map((club) => club[keyForChange as keyof MongoDBReturnType].toString()).join(''));
  
        await set('AP_keydatatochange')(data.text);

        const object = await dbProcess.ShowData(currentItem[parseInt(user['AP_respondkeydata_clubid']) - 1]),
          users = await dbProcess.ShowAllUsers();
          
        ctx.telegram.sendMessage(object!.teacher_id, `${object!.teacher}!\n\n–•–æ—á–µ–º–æ –≤–∞—Å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ –Ω–∞ —à–ø—Ä–∞—Ö-–∫–ª—É–±—ñ ${object!.title}, –∫–æ—Ç—Ä–∏–π –Ω–∞ ${dbProcess.getDateClub(new Date(object!.date))} –æ ${object!.time} –±—É–ª–∏ –∑–º—ñ–Ω–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:\n\n\nüëâüèΩ–ë—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ - ${keyForChangeService}\n‚úÖ–ù–æ–≤—ñ –¥–∞–Ω—ñ - ${data.text}`);
        for (let i = 0; i < users.length; i++){
          if (await dbProcess.HasThisClubUser(users[i].id, object!._id)){
            ctx.telegram.sendMessage(users[i].id, `${users[i].name}!\n\n–•–æ—á–µ–º–æ –≤–∞—Å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ –Ω–∞ —à–ø—Ä–∞—Ö-–∫–ª—É–±—ñ ${object!.title}, –∫–æ—Ç—Ä–∏–π –Ω–∞ ${dbProcess.getDateClub(new Date(object!.date))} –æ ${object!.time} –±—É–ª–∏ –∑–º—ñ–Ω–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:\n\n\nüëâüèΩ–ë—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ - ${keyForChangeService}\n‚úÖ–ù–æ–≤—ñ –¥–∞–Ω—ñ - ${data.text}`);
          }
        }
        await dbProcess.ChangeKeyData(getCurrentClub[0]!, keyForChange, data.text);
        ctx.reply('–£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!', {
          parse_mode: "Markdown",
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.spekingClubAdminPanel()
          },
        });

        await set('state')('RespondAdminActionAndRootChoose');
      }
    }
    else{
      ctx.reply('—Ü–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');
    }
  })

  onDocumentationMessage('ChangeThisDocAndCheckThis', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAll();

    if (CheckException.BackRoot(data)){
      ctx.reply("–Ø–∫–∏–π —Å–∞–º–µ –ø—É–Ω–∫—Ç —Ç—Ä–µ –∑–º—ñ–Ω–∏—Ç–∏?", {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.adminPanelChangeClub()
        }
      });

      await set('state')('GetChangesAndChangeThis');
    }
    else if (CheckException.FileException(data)){
      const keyForChange = user['AP_keyforchange'],
        object = results[parseInt(user['AP_respondkeydata_clubid']) - 1],
        users = await dbProcess.ShowAllUsers();

        console.log(object.title);

      await set('AP_keydatatochange')(data.text);
      await dbProcess.ChangeKeyData(object, keyForChange, data.file[0]);
      ctx.telegram.sendDocument(object.teacher_id, data.file[0], {caption: `–•–µ–π!\n\nü§ùüèΩ –•–æ—á–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ —É –∫–ª—É–±–∞ ${object.title}, –∫–æ—Ç—Ä–∏–π –Ω–∞ ${dbProcess.getDateClub(new Date(object.date))} –æ ${object.time} –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç —ñ–∑ –ª–µ–∫—Å–∏–∫–æ—é\n\n–ü—Ä–æ—Å–∏–º–æ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å‚ù§Ô∏è`});
      for (let i = 0; i < users.length; i++){
        if (await dbProcess.HasThisClubUser(users[i].id, object!._id)){
          await ctx.telegram.sendDocument(users[i].id, data.file[0], {caption: `–•–µ–π!\n\nü§ùüèΩ –•–æ—á–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ —É –∫–ª—É–±–∞ ${object.title}, –∫–æ—Ç—Ä–∏–π –Ω–∞ ${dbProcess.getDateClub(new Date(object.date))} –æ ${object.time} –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç —ñ–∑ –ª–µ–∫—Å–∏–∫–æ—é\n\n–ü—Ä–æ—Å–∏–º–æ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å‚ù§Ô∏è`});
        }
      }
      ctx.reply('–£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!', {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.spekingClubAdminPanel()
        },
      });

      await set('state')('RespondAdminActionAndRootChoose');
    }
    else{
      ctx.reply('–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ —î PDF');
    }
  })

  onTextMessage('ChangeDateDayAndGetChangeMonth', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–Ø–∫–∏–π —Å–∞–º–µ –ø—É–Ω–∫—Ç —Ç—Ä–µ –∑–º—ñ–Ω–∏—Ç–∏?", {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.adminPanelChangeClub()
        }
      });

      await set('state')('GetChangesAndChangeThis');
    }
    else if (CheckException.TextException(data) && dbProcess.isValidInput(data.text, false)){
      if (parseInt(data.text) <= 31 && parseInt(data.text) >= 1){
        await set('change_date_day')(data.text);

        ctx.reply("–ê —Ç–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å");
        await set('state')('ChangeDateMonthAndGetChangeYear');
      }
      else{
        ctx.reply(`–ü–µ—Ä–µ–ø—Ä–æ—à—É—é, —Ü–µ –∫–æ–ª–∏ ${data.text} —á–∏—Å–ª–æ?\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑.`);
      }
    }
    else{
      ctx.reply('–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –¥–µ–Ω—å');
    }
  })

  onTextMessage('ChangeDateMonthAndGetChangeYear', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–í–≤–µ–¥—ñ—Ç—å –¥–µ–Ω—å:");
      await set('state')('ChangeDateDayAndGetChangeMonth');
    }
    else if (CheckException.TextException(data) && dbProcess.isValidInput(data.text, false)){
      if (parseInt(data.text) <= 12 && parseInt(data.text) >=1){
        await set('change_date_month')(data.text);

        ctx.reply('–Ü –∑–≤—ñ—Å–Ω–æ —Ä—ñ–∫:');
        await set('state')('ChangeDateYearAndSubmit');
      }
      else{
        ctx.reply(`–í–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —î —Ç–∞–∫–∏–π –º—ñ—Å—è—Ü—å, —è–∫ ${data.text}?\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑.`);
      }
    }
    else{
      ctx.reply('–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –º—ñ—Å—è—Ü—å');
    }
  })

  onTextMessage('ChangeDateYearAndSubmit', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–ê —Ç–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å");
      await set('state')('ChangeDateMonthAndGetChangeYear');
    }
    else if (CheckException.TextException(data) && dbProcess.isValidInput(data.text, true)){
      const year = new Date();
      if (new Date(`${parseInt(data.text)}-${user['AP_date_month']}-${user['AP_date_day']}`) >= new Date()){
        if (year.getFullYear() + 1 >= parseInt(data.text)){
          await set('change_date_year')(data.text);
          const currentItem = (await dbProcess.ShowAll()).map(result => result._id),
            object = await dbProcess.ShowData(currentItem[parseInt(user['AP_respondkeydata_clubid']) - 1]),
            users = await dbProcess.ShowAllUsers();

          await dbProcess.ChangeKeyData(object!, 'date', `${data.text}-${user['change_date_month']}-${user['change_date_day']}`)
          await ctx.telegram.sendMessage(object!.teacher_id, `${object!.teacher}!\n\n‚û°Ô∏è –•–æ—á–µ–º–æ –≤–∞—Å –ø–æ–ø–µ—Ä–µ–¥–∏—Ç–∏, —â–æ –∫–ª—É–± ${object!.title}, –∫–æ—Ç—Ä–∏–π ${dbProcess.getDateClub(new Date(object!.date))} –æ ${object!.time}, –≤—ñ–¥—Ç–µ–ø–µ—Ä –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è ${dbProcess.getDateClub(new Date(`${data.text}-${user['change_date_month']}-${user['change_date_day']}`))} ${object!.time}\n\n–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è‚ù§Ô∏è`)
          for (let i = 0; i < users.length; i++){
            if (await dbProcess.HasThisClubUser(users[i].id, object!._id)){
              await ctx.telegram.sendMessage(users[i].id, `${users[i].name}!\n\n‚û°Ô∏è –•–æ—á–µ–º–æ –ø–æ–ø–µ—Ä–µ–¥–∏—Ç–∏, —â–æ –∫–ª—É–±—ñ ${object!.title}, –∫–æ—Ç—Ä–∏–π ${dbProcess.getDateClub(new Date(object!.date))} –æ ${object!.time}, –≤—ñ–¥—Ç–µ–ø–µ—Ä –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è ${dbProcess.getDateClub(new Date(`${data.text}-${user['change_date_month']}-${user['change_date_day']}`))} ${object!.time}\n\n–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è‚ù§Ô∏è`)
            }
          }
          ctx.reply('–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!', {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.spekingClubAdminPanel()
            }
          });

          await set('state')('RespondAdminActionAndRootChoose');
        }
        else{
          ctx.reply(`–û–≥–æ, —Ç–æ —Ü–µ –∞–∂ –Ω–∞ —Ç–∞–∫–∏–π —Ä—ñ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –∫–ª–∞–±? –í ${data.text}! –î—É–∂–µ —Ü—ñ–∫–∞–≤–æ!)\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑`);
        }
      }
      else{
        ctx.reply('–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è –≤–∂–µ –ª—ñ–ø—à–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ, –∞ –Ω–µ –≤–∏–∫–∏–¥—É–≤–∞—Ç–∏ –≤ —Å–ø–æ–≥–∞–¥–∏\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑');
      }
    }
    else{
      ctx.reply('–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ä—ñ–∫');
    }
  })

  onTextMessage('ChangeTimeHourAndGetChangeMinute', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–Ø–∫–∏–π —Å–∞–º–µ –ø—É–Ω–∫—Ç —Ç—Ä–µ –∑–º—ñ–Ω–∏—Ç–∏?", {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.adminPanelChangeClub()
        }
      });

      await set('state')('GetChangesAndChangeThis');
    }
    else if (CheckException.TextException(data) && dbProcess.isValidInput(data.text, false)){
      if (parseInt(data.text) < 24 && parseInt(data.text) > 0){
        await set('change_time_hour')(data.text);
  
        ctx.reply('–ê —Ç–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, —Ö–≤–∏–ª–∏–Ω–∏');
        await set('state')('ChangeTimeMinuteAndSubmit');
      }
      else{
        ctx.reply(`–°–∫—ñ–∫–∏ —Å–∫—ñ–∫–∏? –û–π... –±–∞–±—Ü—è –Ω–µ —á—É—î...\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑`);
      }
    }
    else{
      ctx.reply('–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ —á–∞—Å');
    }
  })

  onTextMessage('ChangeTimeMinuteAndSubmit', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≥–æ–¥–∏–Ω–∏', {reply_markup: {remove_keyboard: true}});
      await set('state')('ChangeTimeHourAndGetChangeMinute');
    }
    else if (CheckException.TextException(data) && dbProcess.isValidInput(data.text, false)){
      if (parseInt(data.text) < 60 && parseInt(data.text) >= 0){
        await set('change_time_minute')(data.text);
        const currentItem = (await dbProcess.ShowAll()).map(result => result._id),
          object = await dbProcess.ShowData(currentItem[parseInt(user['AP_respondkeydata_clubid']) - 1]),
          users = await dbProcess.ShowAllUsers();
  
        await dbProcess.ChangeKeyData(object!, 'time', `${user['change_time_hour']}:${data.text}`);
        await ctx.telegram.sendMessage(object!.teacher_id, `${object!.teacher}!\n\n–•–æ—á–µ–º–æ –ø–æ–ø–µ—Ä–µ–¥–∏—Ç–∏, —â–æ –∫–ª—É–± ${object!.title}, –∫–æ—Ç—Ä–∏–π –Ω–∞ ${dbProcess.getDateClub(new Date(object!.date))} –æ ${object!.time}, —Ç–µ–ø–µ—Ä –±—É–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ –æ ${user['change_time_hour']}:${data.text}\n\n–£–¥–∞—á—ñ‚ù§Ô∏è`)
        for (let i = 0; i < users.length; i++){
          if (await dbProcess.HasThisClubUser(users[i].id, object!._id)){
            await ctx.telegram.sendMessage(users[i].id, `${users[i].name}!\n\n‚û°Ô∏è –•–æ—á–µ–º–æ –ø–æ–ø–µ—Ä–µ–¥–∏—Ç–∏, —â–æ –∫–ª—É–± ${object!.title}, –∫–æ—Ç—Ä–∏–π –Ω–∞ ${dbProcess.getDateClub(new Date(object!.date))} –æ ${object!.time}, —Ç–µ–ø–µ—Ä –±—É–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ –æ ${user['change_time_hour']}:${data.text}\n\n–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è‚ù§Ô∏è`)
          }
        }
        ctx.reply('–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.spekingClubAdminPanel()
          }
        });

        await set('state')('RespondAdminActionAndRootChoose');
      }
      else{
        ctx.reply(`–¢–∞ —Ö–∞–π –π–æ–º—É –≥—Ä–µ—Ü—å! –î–µ —Ü–µ –≤–∏ –±–∞—á–∏–ª–∏ ${data.text} —Ö–≤–∏–ª–∏–Ω?\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑`);
      }
    }
    else{
      ctx.reply('–Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ö–≤–∏–ª–∏–Ω–∏');
    }
  })

  onTextMessage('ChangeTeacherAndSubmit', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–Ø–∫–∏–π —Å–∞–º–µ –ø—É–Ω–∫—Ç —Ç—Ä–µ –∑–º—ñ–Ω–∏—Ç–∏?", {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.adminPanelChangeClub()
        }
      });

      await set('state')('GetChangesAndChangeThis');
    }
    else if (CheckException.TextException(data)){
      const users = await dbProcess.ShowAllUsers();
      let allTeachers = [];

      for(let i = 0; i < users.length; i++){
        if (users[i].role === 'teacher'){
          allTeachers.push(users[i].name);
        }
      }

      if (allTeachers.includes(data.text)){
        const currentItem = (await dbProcess.ShowAll()).map(result => result._id),
          object = await dbProcess.ShowData(currentItem[parseInt(user['AP_respondkeydata_clubid']) - 1]),
          teacher = await dbProcess.GetTeacherNameAndID(data.text, true);

        if (object!.teacher_id !== '' && object!.teacher_id !== undefined){
          ctx.telegram.sendMessage(object!.teacher_id, `–ê —Ö–∞–π –π–æ–º—É –≥—Ä–µ—Ü—å!\n\n–Ø–∫ –≤–∏–∫–ª–∞–¥–∞—á, –í–∏ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ –∫–ª—É–±–∞ ${object!.title}\n\n–ü–æ–±–∞—á–∏–º–æ—Å—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö‚ù§Ô∏è`);
        }

        ctx.telegram.sendMessage(teacher[1], `–ô–æ—É!\n\n–í–∏ –±—É–ª–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤–∏–∫–ª–∞–¥–∞—á–µ–º –Ω–∞ –∫–ª—É–±—ñ ${object!.title}\n\n–í–¥–∞–ª–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—èüçì`);

        await dbProcess.ChangeKeyData(object!, 'teacher', teacher[0]);
        await dbProcess.ChangeKeyData(object!, 'teacher_id', teacher[1]);

        ctx.reply('–£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.spekingClubAdminPanel()
          }
        })

        await set('state')('ActionClubRespondAndRootAction');
      }
      else{
        const users = await dbProcess.ShowAllUsers();
        let teachers = [];

        for(let i = 0; i < users.length; i++){
          if (users[i].role === 'teacher'){
            teachers.push([{text: users[i].name}])
          }
        }
        ctx.reply('–¢–∞–∫–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: teachers
          }
        })
      }
    }
    else{
      const users = await dbProcess.ShowAllUsers();
        let teachers = [];

        for(let i = 0; i < users.length; i++){
          if (users[i].role === 'teacher'){
            teachers.push([{text: users[i].name}])
          }
        }
        ctx.reply('–¢–∞–∫–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: teachers
          }
        })
    }
  })

  //Personal Student Handler
  onTextMessage('PeronalStudentHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply("–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, –ú–µ—Ä–∫–µ–ª—å! :)", {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "–®–ø—Ä–∞—Ö-–ö–ª—É–±–∏"
              },
              {
                text: "–û—Å–æ–±–æ–≤—ñ —Å–ø—Ä–∞–≤–∏"
              }
            ],[
              {
                text: "–í –ú–ï–ù–Æ"
              }
            ]
          ],
        },
      })

      await set('state')('AdminRootHandler');
    }
    else if (data.text === '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'){
      const results = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        if (i % 10 === 0 && i != 0){
          const messageWaiting = ctx.reply("–ü–æ—á–µ–∫–∞–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–æ, –ø—ñ–¥–≥—Ä—É–∂–∞—é —â–µ...");
          await new Promise(resolve => setTimeout(resolve, 3000));
          ctx.telegram.deleteMessage(ctx?.chat?.id ?? -1, (await messageWaiting).message_id);
          await ctx.reply(script.speakingClub.report.showUser(i + 1, results[i].name, results[i].id, results[i].username, results[i].number, results[i].count, ConvertRole(results[i].role).toString()), {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.personalStudentAdminPanel()
            }
          });
        }
        else{
          await ctx.reply(script.speakingClub.report.showUser(i + 1, results[i].name, results[i].id, results[i].username, results[i].number, results[i].count, ConvertRole(results[i].role).toString()), {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.personalStudentAdminPanel()
            }
          });
        }
      }
    }
    else if (data.text === '–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É'){
      ctx.reply('–í–≤–µ–¥—ñ—Ç—å id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è', {reply_markup: {remove_keyboard: true}});
      await set('state')('ChangeUserNameAndProcessChange');
    }
    else if (data.text === '–ó–º—ñ–Ω–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç'){
      ctx.reply('–í–≤–µ–¥—ñ—Ç—å id —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç', {reply_markup: {remove_keyboard: true}});
      await set('state')('ChangeActivePacket_GetID');
    }
    else if (data.text === '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤'){
      const results = await dbProcess.ShowAllUsers();
      for (let i = 0; i < results.length; i++) {
        if (results[i].role === 'student'){
          if (i % 10 === 0 && i != 0){
            const messageWaiting = ctx.reply("–ü–æ—á–µ–∫–∞–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–æ, –ø—ñ–¥–≥—Ä—É–∂–∞—é —â–µ...");
            await new Promise(resolve => setTimeout(resolve, 3000));
            ctx.telegram.deleteMessage(ctx?.chat?.id ?? -1, (await messageWaiting).message_id);
            await ctx.reply(script.speakingClub.report.showUserToAdmin(i + 1, results[i].name, results[i].id, results[i].username, 
              results[i].number, results[i].count, ConvertRole(results[i].role).toString(), ConvertToPacket((await db.get(results[i].id)('club-typeclub'))!), ConvertToPrice((await db.get(results[i].id)('club-typeclub'))!)!), {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: keyboards.personalStudentAdminPanel()
              }
            });
          }
          else{
            await ctx.reply(script.speakingClub.report.showUserToAdmin(i + 1, results[i].name, results[i].id, results[i].username, 
              results[i].number, results[i].count, ConvertRole(results[i].role).toString(), ConvertToPacket((await db.get(results[i].id)('club-typeclub'))!), ConvertToPrice((await db.get(results[i].id)('club-typeclub'))!)!), {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: keyboards.personalStudentAdminPanel()
              }
            });
          }
        }
      }
    }
    else if (data.text === '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤'){
      const results = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        if (results[i].role === 'teacher'){
          await ctx.reply(script.speakingClub.report.showUser(i + 1, results[i].name, results[i].id, results[i].username, results[i].number, results[i].count, ConvertRole(results[i].role).toString()), {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.personalStudentAdminPanel()
            }
          });
        }
      }
    }
    else if (data.text === '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–Ω—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞'){
      ctx.reply('–í–≤–µ–¥—ñ—Ç—å id —Å—Ç—É–¥–µ–Ω—Ç–∞, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –π–æ–º—É –∑–∞–Ω—è—Ç—å —Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç');
      await set('state')('RespondIDAndShowCount&Packet');
    }
    else if (data.text === '–ü—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è —Å—Ç—É–¥–µ–Ω—Ç—É'){
      ctx.reply('–í–≤–µ–¥—ñ—Ç—å id —Å—Ç—É–¥–µ–Ω—Ç–∞, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –π–æ–≥–æ –∑–∞–Ω—è—Ç—å');
      await set('state')('ResondIDAndForceChangeAvaibleLessons');
    }
    else if (data.text === '–ü–æ–∫–∞–∑–∞—Ç–∏ –ê–¥–º—ñ–Ω—ñ–≤ —Ç–∞ –†–æ–∑—Ä–æ–±–Ω–∏–∫–∞'){
      const results = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        if (results[i].role === 'admin' || results[i].role === 'developer'){
          await ctx.reply(script.speakingClub.report.showUser(i + 1, results[i].name, results[i].id, results[i].username, results[i].number, results[i].count, ConvertRole(results[i].role).toString()), {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.personalStudentAdminPanel()
            }
          });
        }
      }
    }
    else if (data.text === '–î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è —Å—Ç—É–¥–µ–Ω—Ç—É'){
      const results = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        await ctx.reply(script.speakingClub.report.showUserToAdmin(i + 1, results[i].name, results[i].id, results[i].username, results[i].number, 
          results[i].count, ConvertRole(results[i].role).toString(), ConvertToPacket((await db.get(results[i].id)('club-typeclub'))!), ConvertToPrice((await db.get(results[i].id)('club-typeclub'))!)!));
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('AddLessonForStudent');
    }
    else if (data.text === '–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞'){
      const results = await dbProcess.ShowAllUsers();
  
      for (let i = 0; i < results.length; i++) {
        await ctx.reply(script.speakingClub.report.showUserToAdmin(i + 1, results[i].name, results[i].id, results[i].username, 
          results[i].number, results[i].count, ConvertRole(results[i].role).toString(), ConvertToPacket((await db.get(results[i].id)('club-typeclub'))!), ConvertToPrice((await db.get(results[i].id)('club-typeclub'))!)!));
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('DeleteStudentAndCheckAction');
    }
    else if (data.text === '–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'){
      const results = await dbProcess.ShowAllUsers();
  
      for (let i = 0; i < results.length; i++) {
        await ctx.reply(script.speakingClub.report.showUser(i + 1, results[i].name, results[i].id, results[i].username, results[i].number, results[i].count, ConvertRole(results[i].role).toString()));
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('RespondUserToActionAndGetRole');
    }
    else if (data.text === '–í –ú–ï–ù–Æ'){
      const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);
      ctx.reply(script.entire.chooseFunction, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
        }
      })

      await set('state')('FunctionRoot');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })
    }
  })

  // Add Lessons Student
  onTextMessage('AddLessonForStudent', async(ctx, user, set, data) => {
    const results = (await dbProcess.ShowAllUsers()).map(result => result._id);

    if (CheckException.BackRoot(data)){
      ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 1 && parseInt(data.text) <= results.length){
      await set('AP_student_id')(data.text);

      await ctx.reply('–°–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞–º–æ?');
      await set('state')('CheckAvaibleActivePacketAndChangeCountLesson');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('CheckAvaibleActivePacketAndChangeCountLesson', async(ctx, user, set, data) => {
    const userIDWithoutProcessing = parseInt(user['AP_student_id']),
      userIDChat: number = (await dbProcess.ShowAllUsers()).map(item => item.id)[userIDWithoutProcessing - 1],
      getUserActualName = (await dbProcess.ShowAllUsers()).map(item => item.name)[userIDWithoutProcessing - 1];
    
    if (CheckException.BackRoot(data)){
      const results = await dbProcess.ShowAllUsers();
    
      for (let i = 0; i < results.length; i++) {
        await ctx.reply(script.speakingClub.report.showUserToAdmin(i + 1, results[i].name, results[i].id, results[i].username, 
          results[i].number, results[i].count, ConvertRole(results[i].role).toString(), ConvertToPacket((await db.get(results[i].id)('club-typeclub'))!), ConvertToPrice((await db.get(results[i].id)('club-typeclub'))!)!));
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('AddLessonForStudent');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 1){
      await set('AP_UserChangeCountLesson_IDChat')(userIDChat.toString());
      await set('AP_UserChangeCountLesson_Name')(getUserActualName);
      await set('AP_UserChangeCountLesson_New')(data.text);
      if (await db.get(userIDChat)('club-typeclub')){
        ctx.reply(script.speakingClub.activePacketCheck.ifAvaibleActivePacket(getUserActualName, (await db.get(userIDChat)('club-typeclub'))!, ConvertToPrice((await db.get(userIDChat)('club-typeclub'))!)!), {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: '—Ç–∞–∫'
                },
                {
                  text: '–Ω—ñ'
                }
              ]
            ]
          }
        })

        await set('state')('ChoosePacketHandlerCustomLesson')
      }
      else{
        ctx.reply(script.speakingClub.activePacketCheck.noAvaibleActivePacket(getUserActualName), {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.payPacketLessons()
          }
        })
      }
    }
    else{
      ctx.reply('–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –∞–±–æ —Ä—ñ–≤–Ω–µ –æ–¥–∏–Ω–∏—Ü—ñ.');
    }
  })

  onTextMessage('ChoosePacketHandlerCustomLesson', async(ctx, user, set, data) => {
    const userID = await dbProcess.ShowOneUser(parseInt(user['AP_UserChangeCountLesson_IDChat'])),
      getUserActualName = user['AP_UserChangeCountLesson_Name'],
      toWrite = parseInt(user['AP_UserChangeCountLesson_New'])

    if (CheckException.BackRoot(data)){
      await ctx.reply('–°–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞–º–æ?', {reply_markup: {remove_keyboard: true}});
      await set('state')('CheckAvaibleActivePacketAndChangeCountLesson');
    }
    else if (data.text === '—Ç–∞–∫'){
      await dbProcess.ChangeCountUser(userID!._id, toWrite);  

      await ctx.reply(`–£—Å–ø—ñ—à–Ω–æ! –ù–∞ —Ä–∞—Ö—É–Ω–∫—É —É —Å—Ç—É–¥–µ–Ω—Ç–∞ ${getUserActualName}: ${toWrite} –∑–∞–Ω—è—Ç—å`, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        },
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (data.text === '–Ω—ñ'){
      ctx.reply(script.speakingClub.activePacketCheck.ifChooseActivePacket, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.payPacketLessons()
        }
      })
      await set('state')('ChangeCountUserLessonsAndPacket');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: '—Ç–∞–∫'
              },
              {
                text: '–Ω—ñ'
              }
            ]
          ]
        }
      })
    }
  })

  onTextMessage('ChangeCountUserLessonsAndPacket', async(ctx, user, set, data) => {
    const userID = await dbProcess.ShowOneUser(parseInt(user['AP_UserChangeCountLesson_IDChat'])),
      getUserActualName = user['AP_UserChangeCountLesson_Name'],
      toWrite = parseInt(user['AP_UserChangeCountLesson_New'])

    if (CheckException.BackRoot(data)){
      await ctx.reply('–°–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞–º–æ?', {reply_markup: {remove_keyboard: true}});
      await set('state')('CheckAvaibleActivePacketAndChangeCountLesson');
    }
    else if (data.text === '–†–∞–∑–æ–≤–µ –∑–∞–Ω—è—Ç—Ç—è' || data.text === '–®–ø—Ä–∞—Ö-–ö–ª—É–±' || data.text === '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS'){
      await dbProcess.ChangeCountUser(userID!._id, toWrite);
      await db.set(parseInt(user['AP_UserChangeCountLesson_IDChat']))('club-typeclub')(data.text);

      await ctx.reply(`–£—Å–ø—ñ—à–Ω–æ! –ù–∞ —Ä–∞—Ö—É–Ω–∫—É —É —Å—Ç—É–¥–µ–Ω—Ç–∞ ${getUserActualName}: ${toWrite} –∑–∞–Ω—è—Ç—å —Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç ${data.text} (${ConvertToPrice(data.text)} uah)`, {
        parse_mode: "Markdown",
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        },
      })

      await set('state')('PeronalStudentHandler');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.payPacketLessons()
        }
      })
    }
  })

  // Delete Student Handler
  onTextMessage('DeleteStudentAndCheckAction', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAllUsers();

    if (CheckException.BackRoot(data)){
      ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 1 && parseInt(data.text) <= results.length){
      await set('AP_DeleteStudentHandler_deleteindex')(data.text)

      ctx.reply(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Ññ${data.text}`, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [
            [
              {
                text: "—Ç–∞–∫"
              },
              {
                text: "–Ω—ñ"
              }
            ]
          ]
        }
      })

      await set('state')('DeleteStudentHandlerAndReturn');
    }
    else{
      ctx.reply('–ü–æ–º–∏–ª–∫–∞', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })
    }
  })

  onTextMessage('DeleteStudentHandlerAndReturn', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAllUsers(),
      indexToDelete = user['AP_DeleteStudentHandler_deleteindex'];

    if (CheckException.BackRoot(data)){
      const results = await dbProcess.ShowAllUsers();
  
      for (let i = 0; i < results.length; i++) {
        await ctx.reply(script.speakingClub.report.showUserToAdmin(i + 1, results[i].name, results[i].id, results[i].username, 
          results[i].number, results[i].count, ConvertRole(results[i].role).toString(), ConvertToPacket((await db.get(results[i].id)('club-typeclub'))!), ConvertToPrice((await db.get(results[i].id)('club-typeclub'))!)!));
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('DeleteStudentAndCheckAction');
    }
    else if (data.text === '—Ç–∞–∫'){
      await dbProcess.DeleteUser(results.map(item => item.id)[parseInt(indexToDelete) - 1]);

      ctx.reply(`–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ ‚Ññ${indexToDelete}`, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (data.text === '–Ω—ñ'){
      ctx.reply(`–ü–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ.`, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError);
    }
  })

  // Change user role
  onTextMessage('RespondUserToActionAndGetRole', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAllUsers();

    if (CheckException.BackRoot(data)){
      ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 1 && parseInt(data.text) <= results.length){
      const getUserActualName = (await dbProcess.ShowAllUsers()).map(item => item.name)[parseInt(data.text) - 1];
      await set('AP_StudentHandler_idToChange')(data.text);

      ctx.reply(`–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —Ä–æ–ª—å –¥–ª—è ${getUserActualName}`, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.roleChange()
        }
      })

      await set('state')('RespondRoleAndReturn');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError);
    }
  })

  onTextMessage('RespondRoleAndReturn', async(ctx, user, set, data) => {
    const results = await dbProcess.ShowAllUsers(),
      currentUserObjectID = results.map(item => item.id)[parseInt(user['AP_StudentHandler_idToChange']) - 1];

    if (CheckException.BackRoot(data)){
      const results = await dbProcess.ShowAllUsers();
      
      for (let i = 0; i < results.length; i++) {
        await ctx.reply(script.speakingClub.report.showUserToAdmin(i + 1, results[i].name, results[i].id, results[i].username, results[i].number, 
          results[i].count, ConvertRole(results[i].role).toString(), ConvertToPacket((await db.get(results[i].id)('club-typeclub'))!), ConvertToPrice((await db.get(results[i].id)('club-typeclub'))!)!));
      }

      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: results.map(result => result._id).map((value : ObjectId, index : number) => {
            return [{ text: `${index + 1}` }];
          })
        }
      })

      await set('state')('RespondUserToActionAndGetRole');
    }
    else if (CheckException.TextException(data) && Role(data.text)){
      await dbProcess.ChangeUserRole(currentUserObjectID, Role(data.text).toString());

      ctx.reply(`–£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!`, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.roleChange()
        }
      })
    }
  })

  onTextMessage('ChangeUserNameAndProcessChange', async(ctx, user, set, data) => {
    const id = ctx?.chat?.id ?? -1,
      userInDB = await dbProcess.ShowOneUser(parseInt(data.text));

    if (CheckException.BackRoot(data)){
      ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (userInDB){
      await set('user_to_name_change')(data.text);
      if (false){
        await ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userInDB!.name} –∑–Ω–∞–π–¥–µ–Ω–∏–π —ñ —Ç–∞–∫–æ–∂ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—ñ –®–ø—Ä–∞—Ö-–∫–ª—É–±—ñ–≤\n\n–ê —Ç–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–µ —ñ–º º—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`, {reply_markup: {remove_keyboard: true}});
      }
      else{
        await ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userInDB!.name} –∑–Ω–∞–π–¥–µ–Ω–∏–π, –∞–ª–µ –Ω–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—ñ –®–ø—Ä–∞—Ö-–∫–ª—É–±—ñ–≤\n\n–ê —Ç–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–µ —ñ–º º—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`, {reply_markup: {remove_keyboard: true}});
      }

      await set('state')('ProcessChangeAndReturn');
    }
    else{
      ctx.reply('–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑!');
    }
  })

  onTextMessage('ProcessChangeAndReturn', async(ctx, user, set, data) => {
    const id = ctx?.chat?.id ?? -1,
      userIDToChange = parseInt(user['user_to_name_change']),
      userInDB = await dbProcess.ShowOneUser(userIDToChange);

    if (CheckException.BackRoot(data)){
      ctx.reply('–í–≤–µ–¥—ñ—Ç—å id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è', {reply_markup: {remove_keyboard: true}});
      await set('state')('ChangeUserNameAndProcessChange');
    }
    else if (CheckException.TextException(data)){
      await dbProcess.ChangeUserName(userInDB!._id, data.text);
      if (false){
        // await sheets.ChangeUserNameInSheet(id, data.text);
        await ctx.reply(`–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ —ñ–º º—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userInDB!.name} —ñ –≤ —Ç–∞–±–ª–∏—è—Ü—ñ —Ç–∞–∫–æ–∂, —Ç–µ–ø–µ—Ä –π–æ–≥–æ —ñ–º º—è ${data.text}`, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.personalStudentAdminPanel()
          }
        })
      }
      else{
        await ctx.reply(`–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ —ñ–º º—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userInDB!.name}, –∞–ª–µ –Ω–µ –≤ —Ç–∞–±–ª–∏—á—Ü—ñ, —Ç–µ–ø–µ—Ä –π–æ–≥–æ —ñ–º º—è ${data.text}`, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.personalStudentAdminPanel()
          }
        })
      }

      await set('state')('PeronalStudentHandler');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('RespondIDAndShowCount&Packet', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (CheckException.TextException(data)){
      if (!isNaN(parseInt(data.text))){
        const requestedUser = (await db.getAll(parseInt(data.text))());
        if (requestedUser){
          const user = await dbProcess.ShowOneUser(parseInt(data.text)),
            activePacket = await db.get(parseInt(data.text))('club-typeclub');

          ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user!.name} –º–∞—î –Ω–∞ —Å–≤–æ—î–º—É —Ä–∞—Ö—É–Ω–∫—É ${user!.count} –∑–∞–Ω—è—Ç—å —ñ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç ${activePacket !== null ? activePacket : '–í—ñ–¥—Å—É—Ç–Ω—ñ–π'} ${activePacket !== null ? `(${ConvertToPrice(activePacket!)} uah)` : ''}`, {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.personalStudentAdminPanel()
            }
          });

          await set('state')('PeronalStudentHandler');
        }
        else{
          ctx.reply('–ù–∞–∂–∞–ª—å, —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }
      }
      else{
        ctx.reply('–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –Ω–µ –∑–Ω–∞–≤, —â–æ id –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—É–∫–≤–∏...\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–Ω–æ–≤—É')
      }
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('ResondIDAndForceChangeAvaibleLessons', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –Ω–∞–¥ –∫–∏–º —Å—å–æ–≥–æ–¥–Ω—ñ –±—É–¥–µ–º–æ –∑–Ω—É—â–∞—Ç–∏—Å—å?)', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (CheckException.TextException(data)){
      if (!isNaN(parseInt(data.text))){
        const requestedUser = (await db.getAll(parseInt(data.text))());
        if (requestedUser){
          const user = await dbProcess.ShowOneUser(parseInt(data.text));

          await set('userid_for_forceChangeAvaibleLessons')(data.text);

          ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user!.name} –º–∞—î –Ω–∞ —Å–≤–æ—î–º—É —Ä–∞—Ö—É–Ω–∫—É ${user!.count} –∑–∞–Ω—è—Ç—å.\n\n–°–∫—ñ–ª—å–∫–∏ –ø–æ—Å—Ç–∞–≤–∏–º?`, {reply_markup: {remove_keyboard: true}});

          await set('state')('ForceChangeAvaibleLessonsAndReturn');
        }
        else{
          ctx.reply('–ù–∞–∂–∞–ª—å, —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }
      }
      else{
        ctx.reply('–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –Ω–µ –∑–Ω–∞–≤, —â–æ id –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—É–∫–≤–∏...\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–Ω–æ–≤—É')
      }
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('ForceChangeAvaibleLessonsAndReturn', async(ctx, user, set, data) => {
    const idUser = user['userid_for_forceChangeAvaibleLessons'];

    if (CheckException.BackRoot(data)){
      ctx.reply('–í–≤–µ–¥—ñ—Ç—å id —Å—Ç—É–¥–µ–Ω—Ç–∞, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –π–æ–≥–æ –∑–∞–Ω—è—Ç—å');
      await set('state')('ResondIDAndForceChangeAvaibleLessons');
    }
    else if (CheckException.TextException(data) && !isNaN(parseInt(data.text)) && parseInt(data.text) >= 0 && parseInt(data.text) <= 5){
      const user = await dbProcess.ShowOneUser(parseInt(idUser));
      await dbProcess.ChangeCountUser(user!._id, parseInt(data.text))

      ctx.reply('–£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      });

      await set('state')('PeronalStudentHandler');
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('ChangeActivePacket_GetID', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –Ω–∞–¥ –∫–∏–º —Å—å–æ–≥–æ–¥–Ω—ñ –±—É–¥–µ–º–æ –∑–Ω—É—â–∞—Ç–∏—Å—å?)', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.personalStudentAdminPanel()
        }
      })

      await set('state')('PeronalStudentHandler');
    }
    else if (CheckException.TextException(data)){
      if (!isNaN(parseInt(data.text))){
        const requestedUser = (await db.getAll(parseInt(data.text))());
        if (requestedUser){
          const user = await dbProcess.ShowOneUser(parseInt(data.text));

          await set('userid_for_forceChangeActivePacket')(data.text);

          ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user!.name} –º–∞—î –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç ${(await db.get(parseInt(data.text))('club-typeclub')) === undefined ? '–í—ñ–¥—Å—É—Ç–Ω—ñ–π' : ConvertToPacket((await db.get(parseInt(data.text))('club-typeclub'))!)}\n\n–ù–∞ —è–∫–∏–π –∑–º—ñ–Ω–∏–º–æ?`, {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.payPacketLessons()
            }
          });

          await set('state')('ChangeActivePacket_Handler');
        }
        else{
          ctx.reply('–ù–∞–∂–∞–ª—å, —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        }
      }
      else{
        ctx.reply('–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –Ω–µ –∑–Ω–∞–≤, —â–æ id –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—É–∫–≤–∏...\n\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–Ω–æ–≤—É')
      }
    }
    else{
      ctx.reply(script.errorException.textGettingError.defaultException);
    }
  })

  onTextMessage('ChangeActivePacket_Handler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      ctx.reply('–í–≤–µ–¥—ñ—Ç—å id —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –ø–∞–∫–µ—Ç', {reply_markup: {remove_keyboard: true}});
      await set('state')('ChangeActivePacket_GetID');
    }
    else if (data.text === '–†–∞–∑–æ–≤–µ –∑–∞–Ω—è—Ç—Ç—è' || data.text === '–®–ø—Ä–∞—Ö-–ö–ª—É–±' || data.text === '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS'){
      await db.set(parseInt(user['userid_for_forceChangeActivePacket']))('club-typeclub')(data.text);

      ctx.reply('–£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!');
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.payPacketLessons()
        }
      });
    }
  })

  onTextMessage('TeachersSetTasksHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      //back
    }
    else if (data.text === '–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê'){
      const teacher = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1),
        teacherStudents = teacher!.registered_students;
      if (teacherStudents){
        let students = []
        for(let i = 0; i < teacherStudents.length; i++){
          students.push([{ text: teacherStudents[i] }]);
        }

        ctx.reply('–≤–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—É–Ω–¥–µ–Ω—Ç–∞, –∫–æ—Ç—Ä–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–µ –¥–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: students
          }
        })

        await set('state')('TeachersChooseStudentHandler');
      }
      else ctx.reply('–Ω–∞–∂–∞–ª—å... —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ :(');
    }
    else if (CheckException.TextException(data)){
      await set('teacher_content_detask')(`${user['teacher_content_detask'] ? `${user['teacher_content_detask']},` : ''}${data.text}`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.FileException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.file[0]};${data.file[1]}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}file`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.LocationException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.location[0]};${data.location[1]}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}location`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.PhoneException(data)){
      await set('teacher_content_detask')(`${user['teacher_content_detask'] ? `${user['teacher_content_detask']},` : ''}${data.phone_number[0]};${data.phone_number[1]}`)
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.PhotoException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.photo[0]};${data.photo[1]}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}photo`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.StickerException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.stickers}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}sticker`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.VideoException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.video[0]};${data.video[1]}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']}` : ''}video`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.AudioException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.audio}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}audio`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.VoiceException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.voice}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}voice`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.VideoNoteException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.video_circle}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}video_circle`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else ctx.reply('–ø–æ–º–∏–ª–∫–∞(\n\n—Å—Ö–æ–∂–µ –≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∂ —Ç–∏—Ü—å–Ω—É–ª–∏ –Ω–µ —Ç—É–¥–∏')
  })

  onTextMessage('TeachersChooseStudentHandler', async(ctx, user, set, data) => {
    const teacher = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1),
      teacherStudents = teacher!.registered_students;
    let students = [],
     studentsKeyboard = [];

    for(let i = 0; i < teacherStudents.length; i++){
      students.push(teacherStudents[i]);
      studentsKeyboard.push([{ text: teacherStudents[i] }])
    }
    if (students.includes(data.text)){
      const userID = await dbProcess.GetUserIDByName(data.text);
      if (userID){
        const userObject = await dbProcess.ShowOneUser(userID),
          previousTask = userObject!.detask ? userObject!.detask : false,
          message_operation = await dbProcess.WriteNewDeTask(
          ctx?.chat?.id ?? -1, 
          userID, 
          user['teacher_content_detask'] ? user['teacher_content_detask'].split(',') : false,
          user['teacher_filecontent_detask'] ? user['teacher_filecontent_detask'].split(',') : false,
          user['teacher_typeofcontent_detask'] ? user['teacher_typeofcontent_detask'].split(',') : false
        );

        ctx.reply(`${message_operation === 'student_task_rewrited' ? '–ø–æ–ø–µ—Ä–µ–¥–Ω—î –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ —É —Å—Ç—É–¥–µ–Ω—Ç–∞, —Ç–∞ –¥–æ–¥–∞–Ω–µ –Ω–æ–≤–µ —É—Å–ø—ñ—à–Ω–æ!' : '–∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É!'}`, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [[{text: "–í –ú–ï–ù–Æ"}]]
          }
        });
        ctx.telegram.sendMessage(userID, "–µ–≥–µ–π! —É –≤–∞—Å –Ω–æ–≤–µ –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è!");
        await set('teacher_content_detask')('');
        await set('teacher_filecontent_detask')('');
        await set('teacher_typeofcontent_detask')('');
        if (previousTask) await dbProcess.DeleteDeTask(userObject!.detask);
        await set('state')('EndRootManager');
      }
      else{
        ctx.reply('–Ω–∞–∂–∞–ª—å, —Ü—å–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö, —Ç–æ–º—É –æ–ø–µ—Ä–∞—Ü—ñ—è –Ω–µ–º–æ–∂–ª–∏–≤–∞. —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ', {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: studentsKeyboard
          }
        });
      }
    }
    else{
      ctx.reply(script.errorException.chooseButtonError, {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: studentsKeyboard
        }
      })
    }
  })

  onTextMessage('RespondStudentDeTaskHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      //back
    }
    else if (data.text === '–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨'){
      const student = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1),
        deTask = await dbProcess.GetDeTaskForStudent(student!.detask);

      await dbProcess.WriteAnswerToDeTask(
        deTask!._id, 
        user['student_content_detask'] ? user['student_content_detask'].split(',') : false, 
        user['student_filecontent_detask'] ? user['student_filecontent_detask'].split(',') : false, 
        user['student_typeofcontent_detask'] ? user['student_typeofcontent_detask'].split(',') : false
      );

      await set('student_content_detask')('');
      await set('student_filecontent_detask')('');
      await set('student_typeofcontent_detask')('');

      ctx.telegram.sendMessage(deTask!.idTeacher, `—Å—Ç—É–¥–µ–Ω—Ç ${student!.name} –¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è!`);

      ctx.reply('–∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–¥–∞–Ω—ñ!', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{ text: "–í –ú–ï–ù–Æ" }]]
        }
      })

      await set('state')('EndRootManager');
    }
    else if (CheckException.TextException(data)){
      await set('student_content_detask')(`${user['student_content_detask'] ? `${user['student_content_detask']},` : ''}${data.text}`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else if (CheckException.FileException(data)){
      await set('student_filecontent_detask')(`${user['student_filecontent_detask'] ? `${user['student_filecontent_detask']},` : ''}${data.file[0]};${data.file[1]}`);
      await set('student_typeofcontent_detask')(`${user['student_typeofcontent_detask'] ? `${user['student_typeofcontent_detask']},` : ''}file`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else if (CheckException.LocationException(data)){
      await set('student_filecontent_detask')(`${user['student_filecontent_detask'] ? `${user['student_filecontent_detask']},` : ''}${data.location[0]};${data.location[1]}`);
      await set('student_typeofcontent_detask')(`${user['student_typeofcontent_detask'] ? `${user['student_typeofcontent_detask']},` : ''}location`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else if (CheckException.PhoneException(data)){
      await set('student_content_detask')(`${user['student_content_detask'] ? `${user['student_content_detask']},` : ''}${data.phone_number[0]};${data.phone_number[1]}`)
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else if (CheckException.PhotoException(data)){
      await set('student_filecontent_detask')(`${user['student_filecontent_detask'] ? `${user['student_filecontent_detask']},` : ''}${data.photo[0]};${data.photo[1]}`);
      await set('student_typeofcontent_detask')(`${user['student_typeofcontent_detask'] ? `${user['student_typeofcontent_detask']},` : ''}photo`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else if (CheckException.StickerException(data)){
      await set('student_filecontent_detask')(`${user['student_filecontent_detask'] ? `${user['student_filecontent_detask']},` : ''}${data.stickers}`);
      await set('student_typeofcontent_detask')(`${user['student_typeofcontent_detask'] ? `${user['student_typeofcontent_detask']},` : ''}sticker`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else if (CheckException.VideoException(data)){
      await set('student_filecontent_detask')(`${user['student_filecontent_detask'] ? `${user['student_filecontent_detask']},` : ''}${data.video[0]};${data.video[1]}`);
      await set('student_typeofcontent_detask')(`${user['student_typeofcontent_detask'] ? `${user['student_typeofcontent_detask']}` : ''}video`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else if (CheckException.AudioException(data)){
      await set('student_filecontent_detask')(`${user['student_filecontent_detask'] ? `${user['student_filecontent_detask']},` : ''}${data.audio}`);
      await set('student_typeofcontent_detask')(`${user['student_typeofcontent_detask'] ? `${user['student_typeofcontent_detask']},` : ''}audio`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else if (CheckException.VoiceException(data)){
      await set('student_filecontent_detask')(`${user['student_filecontent_detask'] ? `${user['student_filecontent_detask']},` : ''}${data.voice}`);
      await set('student_typeofcontent_detask')(`${user['student_typeofcontent_detask'] ? `${user['student_typeofcontent_detask']},` : ''}voice`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.VideoNoteException(data)){
      await set('student_filecontent_detask')(`${user['student_filecontent_detask'] ? `${user['student_filecontent_detask']},` : ''}${data.video_circle}`);
      await set('student_typeofcontent_detask')(`${user['student_typeofcontent_detask'] ? `${user['student_typeofcontent_detask']},` : ''}video_circle`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–í–Ü–î–ü–†–ê–í–ò–¢–ò –í–Ü–î–ü–û–í–Ü–î–¨"}]]
        }
      })
    }
    else{
      ctx.reply('–ø–æ–º–∏–ª–∫–∞(\n\n—Å—Ö–æ–∂–µ –≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∂ —Ç–∏—Ü—å–Ω—É–ª–∏ –Ω–µ —Ç—É–¥–∏')
    }
  })

  onTextMessage('TeacherDeTaskHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){

    }
    else{
      const teacher = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1),
        teachersStudents = teacher!.registered_students,
        teacherTasks = teacher!.set_detasks;
      let keyboard = [];
      switch(data.text){
        case "–î–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
          ctx.reply('–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å—é–¥–∏ —É—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, —è–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—é —Ç–∞ –ø—ñ—Å–ª—è –≤–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è')
          await set('state')('TeachersSetTasksHandler')
          break;

        case "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
          for (let i = 0; i < teachersStudents.length; i++){
            const studentID = await dbProcess.GetUserIDByName(teachersStudents[i]),
              userObject = await dbProcess.ShowOneUser(studentID),
              task = await dbProcess.GetStudentAnswerForDeTask(studentID);

            if (task){
              for (let j = 0; j < teacherTasks.length; j++){
                if (teacherTasks[j].toString() === userObject!.detask.toString()){
                  keyboard.push([{ text: teachersStudents[i]}])
                }
              }
            }
          }

          if (!keyboard.length){
            ctx.reply('–Ω–∞–∂–∞–ª—å... –≤–∏ –Ω–µ –º–∞—î—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫–∏–º –¥–∞–≤–∞–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ :)', {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: keyboards.deTaskMenu()
              }
            });
          }
          else{
            ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —Ç–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç—Ä–∏–π –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω', {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: keyboard
              }
            })
            await set('state')('GetStudentForTeacherDeTaskHandler');
          }
          break;

        default:
          ctx.reply(script.errorException.chooseButtonError, {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.deTaskMenu() // TODO
            }
          })
      }
    }
  })

  onTextMessage('GetStudentForTeacherDeTaskHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){

    }
    else if (CheckException.TextException(data)){
      const studentID = await dbProcess.GetUserIDByName(data.text),
        student = await dbProcess.ShowOneUser(studentID),
        teacher = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1),
        teacherTasks = teacher ? teacher.set_detasks : false,
        teacherRegisterStudents = teacher ? teacher.registered_students : false;
      let teacherHaveThisTask = false,
        errorKeyboard = [];

      for (let i = 0; i < teacherRegisterStudents.length; i++){
        errorKeyboard.push([{ text: teacherRegisterStudents[i] }]);
      }

      for (let i = 0; i < teacherTasks.length; i++){
        if (teacherTasks[i].toString() === student?.detask?.toString()){
          teacherHaveThisTask = true;
          break;
        }
      }

      if (student && teacherTasks && teacherRegisterStudents.includes(data.text)){
        const answer = await dbProcess.GetStudentAnswerForDeTask(studentID);

        await set('tmp_userid_detask')(studentID);

        if (student.detask){
          if (teacherHaveThisTask){
            console.log(answer[0])
            if (answer[0] !== 'no_answer_available'){
              await ctx.reply('—á—É–¥–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞! –∑ —Ä–∞–¥—ñ—Å—Ç—é –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ —Å—Ç—É–¥–µ–Ω—Ç –¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è!');
              new Promise(resolve => setTimeout(() => resolve, 2000));
              if (answer){
                if (answer[0]){
                  const content = answer[0];
                  for (let i = 0; i < content.length; i++){
                    await ctx.reply(content[i]);
                  }
                }
                if (answer[1] && answer[2]){
                  const files = answer[1],
                    idAddress = ctx?.chat?.id ?? -1;
                  for (let i = 0; i < files.length; i++){
                    switch (answer[2][i]) {
                      case "file":
                        const file = files[i].split(';');
                        await ctx.telegram.sendDocument(idAddress, file[0], {caption: file[1] ? file[1] : ''});
                        break;
      
                      case "photo":
                        const photo = files[i].split(';');
                        await ctx.telegram.sendPhoto(idAddress, photo[0], {caption: photo[1] ? photo[1] : ''});
                        break;
      
                      case "audio":
                        await ctx.telegram.sendAudio(idAddress, files[i]);
                        break;
      
                      case "location":
                        const loc = files[i].split(';');
                        await ctx.telegram.sendLocation(idAddress, loc[0], loc[1]);
                        break;
      
                      case "video_circle":
                        await ctx.telegram.sendVideoNote(idAddress, files[i]);
                        break;
      
                      case "voice":
                        await ctx.telegram.sendVoice(idAddress, files[i]);
                        break;
      
                      case "contact":
                        const phone = files[i].split(';');
                        await ctx.telegram.sendContact(idAddress, phone[0], phone[1]);
                        break;
      
                      default:
                        ctx.reply('–Ω–∞–º –ø—Ä–∏–∫—Ä–æ, –∞–ª–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–º —Ç–∏–ø —Ñ–∞–π–ª—É –Ω–∞—Ä–∞–∑—ñ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –≤–∏–±–∞—á—Ç–µ –∑–∞ —Ç—Ä—É–¥–Ω–æ—â—ñ...');
                        break;
      
                    }
                  }
                }
                await ctx.reply('–≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞ :)', {
                  reply_markup: {
                    one_time_keyboard: true,
                    keyboard: keyboards.deTaskMenu('have_task')
                  }
                });

                await set('state')('EndTeacherDeTaskHandler');
              }
            }
            else{
              await set('detask_tmp_endkeyboard')('have_task');
              ctx.reply('–Ω–∞–∂–∞–ª—å, —Å—Ç—É–¥–µ–Ω—Ç —â–µ –Ω–µ –¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è :(', {
                reply_markup: {
                  one_time_keyboard: true,
                  keyboard: keyboards.deTaskMenu('have_task')
                }
              });
              await set('state')('EndTeacherDeTaskHandler');
            }
          }
          else{
            ctx.reply('–≤–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ –Ω–µ –¥–∞–≤–∞–ª–∏ —Ü—å–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è...', {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: errorKeyboard
              }
            });
            ctx.telegram.sendMessage(devChat, `ERROR:\n\nTeacher ${user['name']} (id: ${ctx?.chat?.id ?? -1}, tg: @${user['username']}) has a student who did not give the assignment\n\n–≤–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ –Ω–µ –¥–∞–≤–∞–ª–∏ —Ü—å–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è...`)
          }
        }
        else{
          await set('detask_tmp_endkeyboard')('not_have_task');
          ctx.reply('—Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –º–∞—î –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è, –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ü–µ ;)', {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.deTaskMenu('not_have_task')
            }
          })

          await set('state')('EndTeacherDeTaskHandler');
        }
      }
      else{
        ctx.reply(script.errorException.chooseButtonError, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: errorKeyboard
          }
        });
      }
    }
  })

  onTextMessage('EndTeacherDeTaskHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      //back
    }
    else{
      switch(data.text){
        case "–î–∞—Ç–∏ —ñ–Ω—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è":
          ctx.reply('–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å—é–¥–∏ —É—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, —è–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—é —Ç–∞ –ø—ñ—Å–ª—è –≤–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è')
          await set('detask_tmp_endkeyboard')('');
          await set('state')('AnotherTeachersSetTasksHandler');
          break;

        case "–î–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è":
          ctx.reply('–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å—é–¥–∏ —É—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, —è–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—é —Ç–∞ –ø—ñ—Å–ª—è –≤–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è')
          await set('detask_tmp_endkeyboard')('');
          await set('state')('AnotherTeachersSetTasksHandler');
          break;

        case "–í –ú–ï–ù–Æ":
          console.log('FunctionRoot');
          const userI = await dbProcess.ShowOneUser(ctx?.chat?.id ?? -1);
          ctx.reply(script.entire.chooseFunction, {
            parse_mode: "Markdown",
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.mainMenu(ctx?.chat?.id ?? -1, userI!.role)
            }
          })
          await set('detask_tmp_endkeyboard')('');
          await set('state')('FunctionRoot');
          break;

        default:
          ctx.reply(script.errorException.chooseButtonError, {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.deTaskMenu(user['detask_tmp_endkeyboard'])
            }
          })
          await set('detask_tmp_endkeyboard')('');
          break;
      }
    }
  })

  onTextMessage('AnotherTeachersSetTasksHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      //back
    }
    else if (data.text === '–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø'){
      const userID = parseInt(user['tmp_userid_detask']),
        userObject = await dbProcess.ShowOneUser(userID);

      if (userObject){
        const previousTask = userObject!.detask ? userObject!.detask : false,
          message_operation = await dbProcess.WriteNewDeTask(
            ctx?.chat?.id ?? -1, 
            userID, 
            user['teacher_content_detask'] ? user['teacher_content_detask'].split(',') : false, 
            user['teacher_filecontent_detask'] ? user['teacher_filecontent_detask'].split(',') : false,
            user['teacher_typeofcontent_detask'] ? user['teacher_typeofcontent_detask'].split(',') : false
          );

        ctx.reply(`${message_operation === 'student_task_rewrited' ? '–ø–æ–ø–µ—Ä–µ–¥–Ω—î –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ —É —Å—Ç—É–¥–µ–Ω—Ç–∞, —Ç–∞ –¥–æ–¥–∞–Ω–µ –Ω–æ–≤–µ —É—Å–ø—ñ—à–Ω–æ!' : '–∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É!'}`, {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [[{text: "–í –ú–ï–ù–Æ"}]]
          }
        });
        ctx.telegram.sendMessage(userID, "–µ–≥–µ–π! —É –≤–∞—Å –Ω–æ–≤–µ –¥–µ–ó–∞–≤–¥–∞–Ω–Ω—è!");
        if (previousTask) await dbProcess.DeleteDeTask(userObject!.detask);
      }
      else ctx.reply('–Ω–∞–∂–∞–ª—å... –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å—Ç—É–¥–µ–Ω—Ç —è–∫–æ–≥–æ –≤–∏ –æ–±—Ä–∞–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö :(\n\n–ø–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–Ω–æ–≤—É', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{ text: "–í –ú–ï–ù–Æ" }]]
        }
      })

      await set('teacher_content_detask')('');
      await set('teacher_filecontent_detask')('');
      await set('teacher_typeofcontent_detask')('');
      await set('tmp_userid_detask')('');
      await set('state')('EndRootManager');
    }
    else if (CheckException.TextException(data)){
      await set('teacher_content_detask')(`${user['teacher_content_detask'] ? `${user['teacher_content_detask']},` : ''}${data.text}`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else if (CheckException.FileException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.file[0]};${data.file[1]}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}file`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else if (CheckException.LocationException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.location[0]};${data.location[1]}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}location`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else if (CheckException.PhoneException(data)){
      await set('teacher_content_detask')(`${user['teacher_content_detask'] ? `${user['teacher_content_detask']},` : ''}${data.phone_number[0]};${data.phone_number[1]}`)
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else if (CheckException.PhotoException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.photo[0]};${data.photo[1]}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}photo`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else if (CheckException.StickerException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.stickers}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}sticker`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else if (CheckException.VideoException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.video[0]};${data.video[1]}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']}` : ''}video`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else if (CheckException.AudioException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.audio}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}audio`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else if (CheckException.VoiceException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.voice}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}voice`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–û–ë–†–ê–¢–ò –°–¢–£–î–ï–ù–¢–ê"}]]
        }
      })
    }
    else if (CheckException.VideoNoteException(data)){
      await set('teacher_filecontent_detask')(`${user['teacher_filecontent_detask'] ? `${user['teacher_filecontent_detask']},` : ''}${data.video_circle}`);
      await set('teacher_typeofcontent_detask')(`${user['teacher_typeofcontent_detask'] ? `${user['teacher_typeofcontent_detask']},` : ''}video_circle`);
      await ctx.reply('–¥–æ–±—Ä–µ–Ω—å–∫–æ, —â–æ –¥–∞–ª—ñ? —á–∏ –≤–∂–µ –≥–æ—Ç–æ–≤–æ?', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{text: "–ù–ê–ó–ù–ê–ß–ò–¢–ò –ó–ê–í–î–ê–ù–ù–Ø"}]]
        }
      })
    }
    else ctx.reply('–ø–æ–º–∏–ª–∫–∞(\n\n—Å—Ö–æ–∂–µ –≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∂ —Ç–∏—Ü—å–Ω—É–ª–∏ –Ω–µ —Ç—É–¥–∏')
  })

  onTextMessage('StudentFindHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      //back
    }
    else if (CheckException.TextException(data)){
      const User = await dbProcess.FindUser(data.text);
      if (User){
        const teacher = await dbProcess.ShowOneUser(User.teacher);
        await set('user_to_change_individual_id')(User.id);
        ctx.reply(script.studentFind.generalFind(
          User.name,
          User.id,
          User.role,
          User.username,
          User.number,
          User.typeOfLessons ?? "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ",
          teacher?.name ?? "–í—ñ–¥—Å—É—Ç–Ω—ñ–π",
          User.individual_count ?? 0,
          User.miro_link ?? "–í—ñ–¥—Å—É—Ç–Ω—è"
        ), {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: keyboards.individualFindUser()
          }
        })

        await set('state')('IndividualUserChangehandler');
      }
      else ctx.reply('—Ç–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑');
    }
  })

  onTextMessage('IndividualUserChangehandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){

    }
    else{
      const User = await dbProcess.ShowOneUser(parseInt(user['user_to_change_individual_id']));
      switch(data.text){
        case "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–Ω—è—Ç—å":
          ctx.reply(`–≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∑–∞–Ω—è—Ç—å, —è–∫–µ –º–∞—î –±—É—Ç–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ (–Ω–∞—Ä–∞–∑—ñ —î: ${User!.individual_count ?? 0} –∑–∞–Ω—è—Ç—å)`);
          await set('admin_parametr_to_change_individual')('individual_count');
          await set('state')('IndividualChangeUserDataHandler');
          break;

        case "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ª—ñ–Ω–∫":
          ctx.reply('–≤–∫–∞–∂—ñ—Ç—å –Ω–æ–≤–∏–π –ª—ñ–Ω–∫ –Ω–∞ –¥–æ—à–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞')
          await set('admin_parametr_to_change_individual')('miro_link');
          await set('state')('IndividualChangeUserDataHandler');
          break;
        
        case "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–æ —ñ–Ω—à–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞":
          ctx.reply('–æ–±–µ—Ä—ñ—Ç—å –≤–∏–∫–ª–∞–¥–∞—á–∞, –¥–æ —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:')
          await set('admin_parametr_to_change_individual')('translate_to_another_teacher');
          await set('state')('IndividualChangeUserDataHandler');
          break;

        case "–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞":
          await set('admin_parametr_to_change_individual')('delete_student');
          ctx.reply('–≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á–∞?', {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.yesNo(true)
            }
          })
          await set('state')('DeleteStudentFromTeacherIndividualHandler');
          break;

        default:
          break;
      }
    }
  })

  onTextMessage('IndividualChangeUserDataHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      //back
    }
    else if (CheckException.TextException(data)){
      switch(user['admin_parametr_to_change_individual']){
        case "individual_count":
          if (!isNaN(parseInt(data.text)) && parseInt(data.text) >= 0){
            await dbProcess.IndividualChangeUserData(
              parseInt(user['user_to_change_individual_id']),
              user['admin_parametr_to_change_individual'],
              parseInt(data.text)
            );
          }
          else{
            ctx.reply('–≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —Ü–∏—Ñ—Ä—É —Ä—ñ–≤–Ω—É –∞–±–æ –±—ñ–ª—å—à–µ 0-–ª—è');
          }
          break;

        default:
          await dbProcess.IndividualChangeUserData(
            parseInt(user['user_to_change_individual_id']),
            user['admin_parametr_to_change_individual'],
            data.text
          );
          const User = await dbProcess.FindUser(user['user_to_change_individual_id']),
            teacher = await dbProcess.ShowOneUser(User.teacher);
          ctx.reply('—É—Å–ø—ñ—à–Ω–æ!');
          ctx.reply(script.studentFind.generalFind(
            User!.name,
            User!.id,
            User!.role,
            User!.username,
            User!.number,
            User!.typeOfLessons ?? "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ",
            teacher?.name ?? "–í—ñ–¥—Å—É—Ç–Ω—ñ–π",
            User!.individual_count ?? 0,
            User!.miro_link ?? "–í—ñ–¥—Å—É—Ç–Ω—è"
          ))
          break;
      }
    }
  })

  onTextMessage('DeleteStudentFromTeacherIndividualHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      //back
    }
    else{
      const User = await dbProcess.FindUser(user['user_to_change_individual_id']),
        teacher = await dbProcess.ShowOneUser(User!.teacher);
      switch(data.text){
        case "–¢–∞–∫":
          await dbProcess.IndividualChangeUserData(
            parseInt(user['user_to_change_individual_id']),
            user['admin_parametr_to_change_individual'],
            data.text
          );
          ctx.reply(script.indivdual.studentDeleteFromTeacher(teacher!.name, User!.name), {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: [[{ text: "–í –ú–ï–ù–Æ" }]]
            }
          });
          await set('state')('EndRootManager');
          break;

        case "–ù—ñ":
          await ctx.reply('—Ñ—É—Ö—Ö, –∞ —Ç–æ –¥—É–º–∞—î–º–æ —è–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –≤–∂–µ..');
          await ctx.reply(script.studentFind.generalFind(
            User!.name,
            User!.id,
            User!.role,
            User!.username,
            User!.number,
            User!.typeOfLessons ?? "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ",
            teacher!.name ?? "–í—ñ–¥—Å—É—Ç–Ω—ñ–π",
            User!.individual_count ?? 0,
            User!.miro_link ?? "–í—ñ–¥—Å—É—Ç–Ω—è"
            ), {
              reply_markup: {
                one_time_keyboard: true,
                keyboard: [[{ text: "–í –ú–ï–ù–Æ" }]]
              }
            })
            await set('state')('EndRootManager');
          break;

        default:
          ctx.reply(script.errorException.chooseButtonError, {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: keyboards.yesNo(true)
            }
          })
      }
    }
  })

  onTextMessage('AdminTeachersOperationHandler', async(ctx, user, set, data) => {
    if (CheckException.BackRoot(data)){
      //back
    }
    else if (CheckException.TextException(data)){
      const teacher = await dbProcess.ShowOneUser(await dbProcess.GetUserIDByName(data.text))
      if (teacher && teacher.role === 'teacher'){
        
      }
    }
  })

  // Payment Main Bot Function Action
  bot.action(/^approvePayment:(\d+)$/, async (ctx) => {
    const id = Number.parseInt(ctx.match[1]);

    try {
      // set up payment status "paid"
      await db.set(id)('paymentStatus')('paid');
      const newInlineKeyboardButtons = inlineApprovePayment(id, 'paid'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    return ctx.answerCbQuery(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å "–û–ü–õ–ê–ß–ï–ù–û" –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${id}`);
  });

  bot.action(/^rejectPayment:(\d+)$/, async (ctx) => {
    const id = Number.parseInt(ctx.match[1]);

    try {
      // set up payment status "no paid"
      await db.set(id)('paymentStatus')('nopaid');
      const newInlineKeyboardButtons = inlineApprovePayment(id, 'nopaid'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    return ctx.answerCbQuery(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å "–ù–ï –û–ü–õ–ê–ß–ï–ù–û" –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${id}`);
  });

  bot.action(/^resetPaymentStatus:(\d+)$/, async (ctx) => {
    const id = Number.parseInt(ctx.match[1]);

    try {
      // set up payment status "unknown"
      await db.set(id)('paymentStatus')('unknown');
      const newInlineKeyboardButtons = inlineApprovePayment(id, 'unknown'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    return ctx.answerCbQuery(`–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å "–ù–ï –í–ò–ó–ù–ê–ß–ï–ù–ò–ô" –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${id}`);
  });

  bot.action(/^paidCheck:(\d+)$/, (ctx) => {
    const id = Number.parseInt(ctx.match[1]);
    return ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${id}, —Å—Ç–∞–Ω: –û–ü–õ–ê–ß–ï–ù–û`);
  });

  bot.action(/^nopaidCheck:(\d+)$/, (ctx) => {
    const id = Number.parseInt(ctx.match[1]);
    return ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${id}, —Å—Ç–∞–Ω: –ù–ï –û–ü–õ–ê–ß–ï–ù–û`);
  });

  // Club Once lesson payment action
  bot.action(/^acceptPayment:(\d+),(.+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]),
      idClub = await dbProcess.ShowData(new ObjectId(ctx.match[2])),
      dateRecord = ctx.match[3],
      users = await dbProcess.ShowAllUsers(),
      currentUser = await dbProcess.ShowOneUser(idUser);

    let currentAvailableCount = idClub!.count - 1

    await dbProcess.WriteNewClubToUser(idUser, idClub!._id)
    await dbProcess.ChangeKeyData(idClub!, 'count', currentAvailableCount);
    await dbProcess.SwitchToCompletTrialLesson(idUser, 'true');

    let recordedUsers = '';

    for (let i = 0; i < users.length; i++){
      if (await dbProcess.HasThisClubUser(users[i].id, idClub!._id)){
        recordedUsers += `- ${users[i].name} (@${users[i].username})\nüì≤${users[i].number}\n\n`;
      }
    }

    //Send Message To Teacher
    await ctx.telegram.sendMessage(idClub!.teacher_id, script.speakingClub.report.reportToTeacherNewOrder(idClub!.title, idClub!.teacher, 
      dbProcess.getDateClub(new Date(idClub!.date)), idClub!.time, currentAvailableCount, recordedUsers));

    await ctx.telegram.sendMessage(idUser, script.speakingClub.report.acceptedTrialLesson((await db.get(idUser)('name'))!.toString(), dbProcess.getDateClub(new Date(idClub!.date)), idClub!.time, idClub!.link));

    await ctx.telegram.sendDocument(idUser, idClub!.documentation, {
      caption: `–æ—Å—å —Ñ–∞–π–ª —ñ–∑ –ª–µ–∫—Å–∏–∫–æ—é, —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –Ω–∞ —à–ø—Ä–∞—Ö-–∫–ª—É–±—ñ ;)`
    });

    await db.set(idUser)('SC_TrialLessonComplet_active')('true');
    ctx.answerCbQuery(`–ó–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—é`);
    // await sheets.appendLessonToUser(idUser, currentUser!.name, currentUser!.number, 
    //   currentUser!.username, currentUser!.email, dateRecord, idClub!.title, idClub!.teacher);

    try {
      // set up payment status "paid"
      await db.set(idUser)('paymentStatusTrialLesson')('paid');
      const newInlineKeyboardButtons = inlineAcceptOncePayment(idUser, ctx.match[2], 'paid', 'date_in_db'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${idUser}, –ö–ª—É–±: ${idClub!.title}`);
  })

  bot.action(/^acceptPaymentWO:(\d+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]),
      //dateRecord = ctx.match[2],
      currentUser = await dbProcess.ShowOneUser(idUser);

    await dbProcess.SwitchToCompletTrialLesson(idUser, 'true');
    await dbProcess.ChangeCountUser(currentUser!._id, currentUser!.count + 1);
    await ctx.telegram.sendMessage(idUser, script.speakingClub.thanksType.typeOnce(currentUser!.name));

    await db.set(idUser)('SC_TrialLessonComplet_active')('true');
    ctx.answerCbQuery(`–ó–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—é`);

    try {
      // set up payment status "paid"
      await db.set(idUser)('paymentStatusTrialLesson')('paid');
      const newInlineKeyboardButtons = inlineAcceptOncePayment(idUser, ctx.match[2], 'paid', 'date_in_db'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${currentUser!.name}, –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û`);
  })

  bot.action(/^declinePaymentWO:(\d+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]);

    await ctx.telegram.sendMessage(idUser, `–≤–∏–±–∞—á—Ç–µ, ${await db.get(idUser)('name')}, –∞–ª–µ –Ω–∞–∂–∞–ª—å –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ —É—Å–ø—ñ—à–Ω–∞.\n–ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∑–º–æ–≤–ª–µ–Ω–Ω—è`);

    try {
      // set up payment status "nopaid"
      await db.set(idUser)('paymentStatusTrialLesson')('nopaid');
      const newInlineKeyboardButtons = inlineAcceptOncePayment(idUser, ctx.match[2], 'nopaid', 'date_in_db'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    return ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${idUser}, –í–Ü–î–ú–Ü–ù–ê`);
  })

  bot.action(/^declinePayment:(\d+),(.+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]);
    const idClub = await dbProcess.ShowData(new ObjectId(ctx.match[2]));

    await ctx.telegram.sendMessage(idUser, `–≤–∏–±–∞—á—Ç–µ, ${await db.get(idUser)('name')}, –∞–ª–µ –Ω–∞–∂–∞–ª—å –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ —É—Å–ø—ñ—à–Ω–∞.\n–ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∑–º–æ–≤–ª–µ–Ω–Ω—è`);

    try {
      // set up payment status "nopaid"
      await db.set(idUser)('paymentStatusTrialLesson')('nopaid');
      const newInlineKeyboardButtons = inlineAcceptOncePayment(idUser, ctx.match[2], 'nopaid', 'date_in_db'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    return ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${idUser}, –ö–ª—É–±: ${idClub!.title}`);
  })

  bot.action(/^paidCheckT:(\d+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]);
    return ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${await db.get(idUser)('name')}, —Å—Ç–∞–Ω: –û–ü–õ–ê–ß–ï–ù–û`);
  });

  bot.action(/^nopaidCheckT:(\d+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]);
    return ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${await db.get(idUser)('name')}, —Å—Ç–∞–Ω: –ù–ï –û–ü–õ–ê–ß–ï–ù–û`);
  });

  // Club Packet Payment
  bot.action(/^acceptPaymentP:(\d+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]),
      packetName = ctx.match[2] === 's' ? '–®–ø—Ä–∞—Ö-–ö–ª—É–±' : '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS',
      currentUser = await dbProcess.ShowOneUser(idUser);

    await dbProcess.ChangeCountUser(currentUser!._id, currentUser!.count + 5);
    await ctx.telegram.sendMessage(idUser, script.speakingClub.report.acceptedPacketPayment((await db.get(idUser)('name'))!.toString(), packetName));
    await db.set(idUser)('SC_TrialLessonComplet_active')('true');
    ctx.answerCbQuery(`–ó–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—é.`);
    // await sheets.changeAvaibleLessonStatus(idUser, true);

    try {
      // set up payment status "paid"
      await db.set(idUser)('paymentStatusTrialLesson')('paid');
      const newInlineKeyboardButtons = inlineAcceptOncePayment(idUser, ctx.match[2], 'paid', 'date_in_db'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${idUser}, –ü–∞–∫–µ—Ç: ${packetName}`);
  })

  bot.action(/^declinePaymentP:(\d+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]);
    const packetName = ctx.match[2] === 's' ? '–®–ø—Ä–∞—Ö-–ö–ª—É–±' : '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS';

    await ctx.telegram.sendMessage(idUser, `–≤–∏–±–∞—á—Ç–µ, ${await db.get(idUser)('name')}, –∞–ª–µ –Ω–∞–∂–∞–ª—å –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ —É—Å–ø—ñ—à–Ω–∞.\n–ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∑–º–æ–≤–ª–µ–Ω–Ω—è`);

    try {
      // set up payment status "nopaid"
      await db.set(idUser)('paymentStatusTrialLesson')('nopaid');
      const newInlineKeyboardButtons = inlineAcceptOncePayment(idUser, ctx.match[2], 'nopaid', 'date_in_db'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    return ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${idUser}, –ü–∞–∫–µ—Ç: ${packetName}`);
  })

  // Club PacketAndClub Payment
  bot.action(/^acceptPaymentCP:(\d+),(.+),(.+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]),
      idClub = await dbProcess.ShowData(new ObjectId(ctx.match[2])),
      packetName = ctx.match[3] === 's' ? '–®–ø—Ä–∞—Ö-–ö–ª—É–±' : '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS',
      dateRecord = ctx.match[4],
      users = await dbProcess.ShowAllUsers(),
      currentUser = await dbProcess.ShowOneUser(idUser);
    let recordedUsers = '';

    await dbProcess.ChangeCountUser(currentUser!._id, currentUser!.count + 4);
    await dbProcess.WriteNewClubToUser(idUser, idClub!._id)
    await dbProcess.ChangeKeyData(idClub!, 'count', idClub!.count - 1);
    await dbProcess.SwitchToCompletTrialLesson(idUser, 'true');

    for (let i = 0; i < users.length; i++){
      if (await dbProcess.HasThisClubUser(users[i].id, new ObjectId(ctx.match[2]))){
        recordedUsers += `- ${users[i].name} (@${users[i].username})\nüì≤${users[i].number}\n\n`;
      }
    }

    //Send Message To Teacher
    await ctx.telegram.sendMessage(idClub!.teacher_id, script.speakingClub.report.reportToTeacherNewOrder(idClub!.title, idClub!.teacher, 
      dbProcess.getDateClub(new Date(idClub!.date)), idClub!.time, idClub!.count - 1, recordedUsers));

    await ctx.telegram.sendMessage(idUser, script.speakingClub.report.acceptedPacketAndClubPayment((await db.get(idUser)('name'))!.toString(), dbProcess.getDateClub(new Date(idClub!.date)), idClub!.time, idClub!.link, packetName));

    await ctx.telegram.sendDocument(idUser, idClub!.documentation, {
      caption: `–æ—Å—å —Ñ–∞–π–ª —ñ–∑ –ª–µ–∫—Å–∏–∫–æ—é, —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –Ω–∞ —à–ø—Ä–∞—Ö-–∫–ª—É–±—ñ ;)`
    });
    await db.set(idUser)('SC_TrialLessonComplet_active')('true');

    ctx.answerCbQuery(`–ó–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—é`);
    // await sheets.changeAvaibleLessonStatus(idUser, true);
    // await sheets.appendLessonToUser(idUser, currentUser!.name, currentUser!.number, currentUser!.username, currentUser!.email !== undefined ? currentUser!.email : '–ø–æ—à—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è', dateRecord, idClub!.title, idClub!.teacher);

    try {
      // set up payment status "paid"
      await db.set(idUser)('paymentStatusTrialLesson')('paid');
      const newInlineKeyboardButtons = inlineAcceptOncePayment(idUser, ctx.match[2], 'paid', 'date_in_db'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${idUser}, –ö–ª—É–±: ${idClub!.title}, –ü–∞–∫–µ—Ç: ${packetName}`);
  })

  bot.action(/^declinePaymentCP:(\d+),(.+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]);
    const idClub = await dbProcess.ShowData(new ObjectId(ctx.match[2]));
    const packetName = ctx.match[3] === 's' ? '–®–ø—Ä–∞—Ö-–ö–ª—É–±' : '–®–ø—Ä–∞—Ö-–ö–ª—É–±+PLUS';

    await ctx.telegram.sendMessage(idUser, `–≤–∏–±–∞—á—Ç–µ, ${await db.get(idUser)('name')}, –∞–ª–µ –Ω–∞–∂–∞–ª—å –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ —É—Å–ø—ñ—à–Ω–∞.\n–ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∑–º–æ–≤–ª–µ–Ω–Ω—è`);

    try {
      // set up payment status "nopaid"
      await db.set(idUser)('paymentStatusTrialLesson')('nopaid');
      const newInlineKeyboardButtons = inlineAcceptOncePayment(idUser, ctx.match[2], 'nopaid', 'date_in_db'),
        newInlineKeyboardMarkup = Markup.inlineKeyboard(newInlineKeyboardButtons).reply_markup;
      await ctx.editMessageReplyMarkup(newInlineKeyboardMarkup);

    } catch (e) {
      console.log(e);
    }

    return ctx.answerCbQuery(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${idUser}, –ö–ª—É–±: ${idClub!.title}, –ü–∞–∫–µ—Ç: ${packetName}`);
  })

  bot.action(/^acceptEventAnnouncementClub:(\d+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]),
      idClub = await dbProcess.ShowData(new ObjectId(ctx.match[2])),
      currentUser = await dbProcess.ShowOneUser(idUser),
      users = await dbProcess.ShowAllUsers(),
      notEnoughLessons = {
        name : await db.get(idUser)('name') === undefined ? '' : await db.get(idUser)('name'),
        username : await db.get(idUser)('username') === undefined ? '' : await db.get(idUser)('username'),
        number : await db.get(idUser)('phone_number') === undefined ? '' : await db.get(idUser)('phone_number'),
        typeClub : await db.get(idUser)('club-typeclub') === undefined ? '' : await db.get(idUser)('club-typeclub')
      }

    let recordedUsers = '';

    if (currentUser!.count > 0){
      if (!await dbProcess.HasThisClubUser(ctx?.chat?.id ?? -1, idClub!._id)){
        await dbProcess.ChangeCountUser(currentUser!._id, currentUser!.count - 1);
        await dbProcess.ChangeKeyData(idClub!, 'count', idClub!.count - 1);
        await dbProcess.WriteNewClubToUser(ctx?.chat?.id ?? -1, idClub!._id);

        for(let i = 0; i < users.length; i++){
          if (await dbProcess.HasThisClubUser(users[i].id, idClub!._id)){
            recordedUsers += `- ${users[i].name} (@${users[i].username})\nüì≤${users[i].number}\n\n`;
          }
        }
    
        //Send Message To Teacher
        await ctx.telegram.sendMessage(idClub!.teacher_id, script.speakingClub.report.reportToTeacherNewOrder(idClub!.title, idClub!.teacher, 
          dbProcess.getDateClub(new Date(idClub!.date)), idClub!.time, idClub!.count - 1, recordedUsers));
        
        await ctx.reply('–û–±—Ä–æ–±–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...');

        if (currentUser!.count === 1){
          // For Developer
          await ctx.telegram.sendMessage(devChat, script.speakingClub.report.notEnoughLessons(
            notEnoughLessons.name!, 
            notEnoughLessons.username!, 
            notEnoughLessons.number!, 
            currentUser!.email !== undefined ? currentUser!.email : "–ü–æ—à—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è", 
            notEnoughLessons.typeClub!
          ));
            
          await ctx.telegram.sendMessage(confirmationChat, script.speakingClub.report.notEnoughLessons(
            notEnoughLessons.name!, notEnoughLessons.username!, notEnoughLessons.number!, currentUser!.email !== undefined ? currentUser!.email : "–ü–æ—à—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è", notEnoughLessons.typeClub!
          ));
            
          // await sheets.changeAvaibleLessonStatus(ctx?.chat?.id ?? -1, false);
        }
        
        await ctx.reply(script.speakingClub.registrationLesson.acceptedRegistration(notEnoughLessons.name!, dbProcess.getDateClub(new Date(idClub!.date)), 
        idClub!.time, idClub!.link), {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: await keyboards.speakingClubMenu()
          }
        });
        
        await ctx.telegram.sendDocument(ctx?.chat?.id ?? -1, idClub!.documentation, {
          caption: `–æ—Å—å —Ñ–∞–π–ª —ñ–∑ –ª–µ–∫—Å–∏–∫–æ—é, —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –Ω–∞ —à–ø—Ä–∞—Ö-–∫–ª—É–±—ñ ;)`}
        )

        // await sheets.appendLessonToUser(currentUser!.id, currentUser!.name, currentUser!.number, currentUser!.username, currentUser!.email !== undefined ? currentUser!.email : '–ø–æ—à—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è',
        //   DateRecord(), idClub!.title, idClub!.teacher);
      }
      else{
        ctx.reply('–≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü–µ–π —à–ø—Ä–∞—Ö!');
      }
    }
    else{
      if (!await dbProcess.HasThisClubUser(ctx?.chat?.id ?? -1, idClub!._id)){
        await db.set(idUser)('sc_request_torecord_usertoclub')(idClub!._id.toString());
        ctx.reply(script.speakingClub.registrationLesson.paymentRequest(notEnoughLessons.name!), {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [
                {
                  text: "—Ç–∞–∫"
                },
                {
                  text: "–Ω—ñ"
                }
              ]
            ]
          }
        })

        await db.set(idUser)('state')('RegistrationChooseHandlerPayment');
      }
      else{
        ctx.reply('–≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü–µ–π —à–ø—Ä–∞—Ö!');
      }
    }

    return ctx.answerCbQuery(`–°–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º –¥–∞–ª—ñ`);
  })

  bot.action(/^declineEventAnnouncementClub:(\d+),(.+)$/, async (ctx) => {
    const idUser = Number.parseInt(ctx.match[1]),
      currentUser = await dbProcess.ShowOneUser(idUser);

      ctx.telegram.sendMessage(idUser, '—Å—É–º–Ω—ñ–≤–Ω–æ, –∞–ª–µ –æ–∫–µ–µ–µ–π)\n–≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!üçì', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: keyboards.mainMenu(currentUser!.id, currentUser!.role)
        }
      })

    await db.set(idUser)('state')('EndRootManager');

    return ctx.answerCbQuery(`–ü—Ä–∏–∫—Ä–æ :(`);
  })

  bot.launch();
}

main();